{"version":3,"sources":["trivia.png","sounds/ShowDoMilhaoTheme.mp3","sounds/certaResposta.mp3","sounds/proximaPergunta.mp3","sounds/Errou.mp3","images/quots_2.png","images/quots_1.png","images/header_base.png","images/back_1.png","components/btnSetupScreen.js","services/GravatarApi.js","redux/actions/index.js","components/InputName.js","components/InputEmail.js","components/PlayBtn.js","services/TriviaApi.js","components/SoundControl.js","pages/Login.js","components/CategoryOptions.js","pages/Setup.js","components/Timer.js","helpers/FunctionsHelpers.js","components/QuestionPainel.js","components/Questions.js","components/Header.js","helpers/FormatQuestions.js","components/BackToLoginGame.js","components/Loading.js","pages/Game.js","pages/FeedBack.js","pages/Ranking.js","pages/About.js","redux/reducers/questions.js","redux/reducers/player.js","redux/reducers/gameMechanics.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js","images/back_4.png","images/gear.png","images/about.png","images/back_3.png","images/trophy_1.png"],"names":["module","exports","btnSetupScreen","to","style","textDecoration","className","src","settingsIMG","alt","type","data-testid","Component","fetchGravatar","hash","a","async","fetch","response","json","data","console","log","sendQuestions","questions","incorrect","correct","InitiateTimer","startTimer","modifyTimer","boolean","modifyNextBtn","addQuestionsPlayed","sendConfigOptionsAction","category","answear","dificulty","modifyPlayingTruOrFalse","bool","InputName","func","this","props","htmlFor","id","onChange","placeholder","defaultProps","InputEmail","PlayBtn","onClick","getToken","token","getQuestions","receiveToken","difficulty","URL","Number","results","sfx","main","Howl","mainTheme","volume","certa","Certa","proxima","Proxima","errou","Errou","stopMain","stop","playMain","playing","play","playProxima","Login","state","inputEmail","showImg","redirect","redirectToAbout","handleOnChangeInputValidate","bind","playHandle","showProfileImg","localStorageSave","resetStoreInfos","aboutBtn","aboutBtnClickHandler","soundTrue","document","querySelector","disabled","setState","resetStorePoints","e","name","button","email","checkValidity","value","length","target","inputName","sendImgSrc","playingfalse","md5","toString","imgHash","score","assertions","player","playerName","gravatarEmail","playerEmail","photo","playerPhoto","categoryConfig","getCategoryConfigFromStore","answearConfig","getAnswearConfigFromStore","dificultyConfig","getDificultyConfigFromStore","localStorage","JSON","stringify","about","logo","connect","playerToken","srcGravatarImg","gameMechanics","categoryValue","answearType","playSound","dispatch","sendGravatarSrcImg","sendQuestionList","questionList","resetStoreScores","PropTypes","CategoryOptions","Setup","appliedConfig","dificultyRender","confirmBtnRender","confirmBtnClickHandler","answearTypeRender","categoryTypeRender","selectChangeHandler","SoundClickHandler","soundBtnRender","allowSound","size","map","item","index","key","sendConfigToStore","color","setup","back","modifyPlaySound","Timer","tick","ResetTimer","SendStopAndResetFunc","clock","setInterval","clearInterval","sendCurrentTime","globalTime","timeToRespond","running","timerRunning","time","decreaseTimeToRespond","startGlobalTimer","func2","reset","INCORRECT","CORRECT","changeBorderColor","wrong","querySelectorAll","forEach","element","border","disableBtnsAfterTimer","allowAbleBtnsAfterNextClick","randomizeCorrectQuestion","randomNumberZeroToTwo","Math","floor","random","gridArea","randomNumberZeroToThree","QuestionPainel","triviaQuestions","idTrivia","questionNumber","questionsPlayed","Questions","generateQuestionsBtnFunc","manageCorrectAnswear","localStorageNewSave","sendAbleQuestBtnFunc","addPoint","globalTimer","showNextBtn","stopTimer","point","multiplier","parse","incorrectQuest","correctAnswears","validateScore","shouldShowNextBtn","question","quot1","quot2","incorrectAnswears","runningTimer","stopTimerFunc","increase","increasePlayerScore","allowQuestionsBtnAfterNextClick","modifyTimerRunning","increasePlayedQuestions","arrayOf","Array","Header","profileImg","profileName","profileScore","FormatCorrectQuestion","replace","FormatIncorrectQuestions","quest","FormatQuestions","BackToLoginGame","Loading","Game","redirectToFeedBack","componentMounted","handleClickNextBtn","resetQuestionsBorderColor","getQuestionList","checkApiResponseValidity","sendRecoveredPlayerInfo","sendRecoveredGameConfigToStore","img","setTimeout","getDifficultyConfigFromStore","receiveQuestions","push","incorrectList","incorrect_answers","correctList","correct_answer","incorrectQuestions","correctQuestions","questionListLength","playingTrue","increaseId","AddTimeToTimer","resetTimer","allowQuestionsBtn","totalQuestions","resetQuestionsId","resetTimerFunc","stopTimerfunc","allowQuestionsBtns","questionIdIncrease","timerBoolean","inc","corre","recoverNameAndEmailFromRefresh","FeedBack","handleClickRankBtn","createRankingStorage","playAgain","PlayAgainClickhandler","userRanking","picture","ranking","localStorageRanking","assertion","trophy","Ranking","redirectHome","renderRanking","backHomeClickHandler","sort","b","user","About","HomeBtnRender","names","arrow1","arrow2","INITIAL_STATE","trivia","action","rootReducers","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","exact","path","component","getElementById"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,8ZCyB5BC,E,iLAnBX,OACE,kBAAC,IAAD,CAAMC,GAAG,SAASC,MAAQ,CAAEC,eAAgB,SAC1C,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,wBACb,yBAAKC,IAAMC,IAAcC,IAAI,sBAAgBH,UAAU,sBAEzD,4BACEI,KAAK,SACLC,cAAY,eACZL,UAAU,2BAHZ,kB,GARmBM,aCSdC,MAXf,SAA6BC,GAA7B,iBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAE2BE,MAAM,GAAD,OAJf,oCAIe,OAAeH,KAF/C,cAEUI,EAFV,kBAAAH,EAAA,MAGuBG,EAASC,QAHhC,cAGUC,EAHV,OAIIC,QAAQC,IAAIF,GAJhB,kBAKWA,GALX,2HC2BA,SAASG,EAAcC,EAAWC,EAAWC,GAC3C,MAAO,CACLhB,KA9BmB,iBA+BnBc,YACAC,YACAC,WAWJ,SAASC,EAAcC,GACrB,MAAO,CACLlB,KA5CmB,iBA6CnBkB,cAmBJ,SAASC,EAAYC,GACnB,MAAO,CACLpB,KA/DiB,eAgEjBoB,WAYJ,SAASC,EAAcD,GACrB,MAAO,CACLpB,KA5EoB,kBA6EpBoB,WAWJ,SAASE,EAAmBR,GAC1B,MAAO,CACLd,KAxFyB,uBAyFzBc,aA2BJ,SAASS,EAAwBC,EAAUC,EAASC,GAClD,MAAO,CACL1B,KAjHwB,sBAkHxBwB,WACAC,UACAC,aAIJ,SAASC,EAAwBC,GAC/B,MAAO,CACL5B,KAzH8B,4BA0H9B4B,Q,ICvIEC,E,iLACM,IACAC,EAASC,KAAKC,MAAdF,KACR,OACE,2BAAOG,QAAQ,YAAYrC,UAAU,aACnC,2BACEI,KAAK,OACLkC,GAAG,YACHjC,cAAY,oBACZkC,SAAWL,EACXM,YAAY,OACZxC,UAAU,wB,GAXIM,aAkBT2B,IAMfA,EAAUQ,aAAe,CACvBP,KAAM,I,ICzBFQ,E,iLACM,IACAR,EAASC,KAAKC,MAAdF,KACR,OACE,2BAAOG,QAAQ,aAAarC,UAAU,cACpC,2BACEI,KAAK,QACLkC,GAAG,aACHjC,cAAY,uBACZkC,SAAWL,EACXM,YAAY,QACZxC,UAAU,wB,GAXKM,aAkBVoC,IAMfA,EAAWD,aAAe,CACxBP,KAAM,I,ICzBFS,E,iLACM,IACAT,EAASC,KAAKC,MAAdF,KACR,OACE,4BACE9B,KAAK,SACLC,cAAY,WACZiC,GAAG,WACHM,QAAUV,EACVlC,UAAU,gBALZ,Y,GAJgBM,aAiBPqC,IAMfA,EAAQF,aAAe,CACrBP,KAAM,I,qBCxBR,SAAeW,IAAf,iBAAApC,EAAAC,OAAA,2EAAAD,EAAA,MAE2BE,MALV,sDAGjB,cAEUC,EAFV,kBAAAH,EAAA,MAGuBG,EAASC,QAHhC,cAGUC,EAHV,yBAIWA,EAAKgC,OAJhB,0HAUA,SAAeC,EAAaC,EAAcpB,EAAUC,EAASoB,GAA7D,mBAAAxC,EAAAC,OAAA,uDACMwC,EAAM,GAGRA,EADEtB,GAAYC,GAAWoB,EACtB,oBAAgBE,OAAOvB,GAAvB,uBAA+CqB,EAA/C,iBAAkEpB,EAAlE,WACMD,EACN,oBAAgBuB,OAAOvB,GAAvB,WACMqB,EACN,sBAAkBA,EAAlB,WACMpB,EACN,gBAAYA,EAAZ,WAEG,UAZV,oBAAApB,EAAA,MAgB2BE,MAAM,GAAD,OA5BN,wCA4BM,OAAwBuC,GAAxB,OAA8BF,KAhB9D,cAgBUpC,EAhBV,kBAAAH,EAAA,MAiB4BG,EAASC,QAjBrC,cAiBUK,EAjBV,yBAkBWA,EAAUkC,SAlBrB,0H,qFCPMC,GAAM,CACVC,KAAM,IAAIC,OAAK,CACbtD,IAAK,CAACuD,KACNC,OAAQ,MAEVC,MAAO,IAAIH,OAAK,CACdtD,IAAK,CAAC0D,OAERC,QAAS,IAAIL,OAAK,CAChBtD,IAAK,CAAC4D,OAERC,MAAO,IAAIP,OAAK,CACdtD,IAAK,CAAC8D,SAIV,SAASC,KACPX,GAAIC,KAAKW,OAGX,SAASC,KACFb,GAAIC,KAAKa,WACZd,GAAIC,KAAKc,OAIb,SAASC,KACPhB,GAAIO,QAAQQ,O,ICfRE,G,YACJ,WAAYlC,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,CACXC,WAAY,GACZC,SAAS,EACT3B,MAAO,GACP4B,UAAU,EACVC,iBAAiB,GAEnB,EAAKC,4BAA8B,EAAKA,4BAA4BC,KAAjC,gBACnC,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAK7B,aAAe,EAAKA,aAAa6B,KAAlB,gBACpB,EAAKI,gBAAkB,EAAKA,gBAAgBJ,KAArB,gBACvB,EAAKK,SAAW,EAAKA,SAASL,KAAd,gBAChB,EAAKM,qBAAuB,EAAKA,qBAAqBN,KAA1B,gBAhBX,E,iFAoBK1C,KAAKC,MAAnBgD,WACOlB,KACf/B,KAAKa,eACLb,KAAK8C,kBACUI,SAASC,cAAc,aAC/BC,UAAW,I,uIAIK1C,K,OAAjBjC,E,OACNuB,KAAKqD,SAAS,CACZ1C,MAAOlC,I,0FAOT6E,EAF6BtD,KAAKC,MAA1BqD,kBACK,O,kDAIaC,GAC1B,IAAMC,EAAON,SAASC,cAAc,cAC9BM,EAASP,SAASC,cAAc,aAChCO,EAAQR,SAASC,cAAc,eAEjCO,EAAMC,iBAAmBD,EAAME,MAAMC,QAAU,GAAKL,EAAKI,MAAMC,QAAU,EAC3EJ,EAAOL,UAAW,IAEjBM,EAAMC,iBACJH,EAAKI,MAAMC,OAAS,GACpBH,EAAME,MAAMC,OAAS,KACxBJ,EAAOL,UAAW,GAEpBpD,KAAKqD,SAAL,eACGE,EAAEO,OAAO3D,GAAKoD,EAAEO,OAAOF,U,oIAKe5D,KAAKoC,MAAtCC,E,EAAAA,WAAY0B,E,EAAAA,UAAWpD,E,EAAAA,M,EACMX,KAAKC,MAAlC+D,E,EAAAA,WAAYC,E,EAAAA,aAEd5F,EAAO6F,IAAI7B,GAAY8B,W,mBACvB/F,EAAcC,I,OACpB2B,KAAKqD,SAAS,CACZf,SAAS,EACT8B,QAAS/F,IAELP,E,0CAAyCO,E,QAC/C2F,EAAWD,EAAWjG,EAAKuE,EAAY1B,GACvCX,KAAK6C,mBACL7C,KAAKqD,SAAS,CACZd,UAAU,IAEZV,KACAoC,GAAa,G,2FAGK,IACVtD,EAAUX,KAAKoC,MAAfzB,MADS,EAQbX,KAAKC,MANDoE,EAFS,EAETA,MACNC,EAHe,EAGfA,WAMIC,EAAS,CACbA,OAAQ,CACNf,KAXa,EAIfgB,WAQEF,aACAD,QACAI,cAda,EAKfC,YAUEC,MAfa,EAMfC,YAUEC,eAhBa,EAOfC,2BAUEC,cAjBa,EAOaC,0BAW1BC,gBAlBa,EAOwCC,8BAczDC,aAAa/C,MAAQgD,KAAKC,UAAUd,GACpCY,aAAaxE,MAAQyE,KAAKC,UAAU1E,K,uCAGpB,IACRyD,EAAYpE,KAAKoC,MAAjBgC,QACR,OACE,yBAAKpG,IAAI,cAAcF,IAAG,0CAAsCsG,EAAtC,Y,iCAK5B,OACE,yBAAKvG,UAAU,iBACb,4BACEI,KAAK,SACLJ,UAAU,yBACV4C,QAAUT,KAAKgD,sBAHjB,SAOA,yBAAKnF,UAAU,qBACb,yBAAKC,IAAMwH,IAAQtH,IAAI,QAAQH,UAAU,sB,6CAO/CmC,KAAKqD,SAAS,CACZb,iBAAiB,M,+BAIX,IAAD,EACwCxC,KAAKoC,MAA5CE,EADD,EACCA,QAASC,EADV,EACUA,SAAUC,EADpB,EACoBA,gBAE3B,OAAID,EAAiB,kBAAC,IAAD,CAAU7E,GAAG,UAC9B8E,EAAwB,kBAAC,IAAD,CAAU9E,GAAG,WAGvC,6BACE,4BAAQG,UAAU,cAChB,yBAAKC,IAAMyH,IAAO1H,UAAU,WAAWG,IAAI,SAC3C,6BAASH,UAAU,mBACjB,0BAAMA,UAAU,iCACd,kBAAC,EAAD,CAAWkC,KAAOC,KAAKyC,8BACvB,kBAAC,EAAD,CAAY1C,KAAOC,KAAKyC,8BACxB,kBAAC,EAAD,CAAS1C,KAAOC,KAAK2C,cAEvB,kBAAC,EAAD,MACA,uBAAMI,SAAN,MACET,EAAUtC,KAAK4C,iBAAmB,U,GAzJ5BzE,aAsLLqH,gBArBS,SAACpD,GAAD,MAAY,CAClCqD,YAAarD,EAAMmC,OAAO5D,MAC1B6D,WAAYpC,EAAMmC,OAAOf,KACzBkB,YAAatC,EAAMmC,OAAOE,cAC1BH,WAAYlC,EAAMmC,OAAOD,WACzBD,MAAOjC,EAAMmC,OAAOF,MACpBO,YAAaxC,EAAMmC,OAAOmB,eAC1BZ,2BAA4B1C,EAAMuD,cAAcC,cAChDZ,0BAA2B5C,EAAMuD,cAAcE,YAC/CX,4BAA6B9C,EAAMuD,cAAchG,UACjDsD,UAAWb,EAAMrD,UAAU+G,cAGF,SAACC,GAAD,MAAe,CACxC/B,WAAY,SAACD,EAAWjG,EAAKuE,EAAY1B,GAA7B,OACVoF,EN/KJ,SAA4BvC,EAAM1F,EAAK4F,EAAO/C,GAC5C,MAAO,CACL1C,KArB0B,wBAsB1BuF,OACA1F,MACA4F,QACA/C,SMyKSqF,CAAmBjC,EAAWjG,EAAKuE,EAAY1B,KAC1DsF,iBAAkB,SAACC,GAAD,OAAkBH,EAASjH,EAAcoH,KAC3D5C,iBAAkB,SAACe,EAAOC,GAAR,OAAuByB,ENvF3C,SAA0B1B,EAAOC,GAC/B,MAAO,CACLrG,KAlGuB,qBAmGvBoG,QACAC,cMmFgD6B,CAAiB9B,EAAOC,KAC1EL,aAAc,SAACpE,GAAD,OAAUkG,EAASnG,EAAwBC,QAG5C2F,CAA6CrD,IAiB5DA,GAAM7B,aAAe,CACnB0D,WAAY,GACZV,iBAAkB8C,IAAUrG,KAC5BkE,aAAcmC,IAAUrG,M,iCCrHXsG,GAvGS,CACtB,CACE5G,SAAU,SACVmE,MAAO,IAET,CACEnE,SAAU,oBACVmE,MAAO,GAET,CACEnE,SAAU,uBACVmE,MAAO,IAET,CACEnE,SAAU,wBACVmE,MAAO,IAET,CACEnE,SAAU,uBACVmE,MAAO,IAET,CACEnE,SAAU,mCACVmE,MAAO,IAET,CACEnE,SAAU,4BACVmE,MAAO,IAET,CACEnE,SAAU,4BACVmE,MAAO,IAET,CACEnE,SAAU,6BACVmE,MAAO,IAET,CACEnE,SAAU,wCACVmE,MAAO,IAET,CACEnE,SAAU,qCACVmE,MAAO,IAET,CACEnE,SAAU,wBACVmE,MAAO,IAET,CACEnE,SAAU,qBACVmE,MAAO,IAET,CACEnE,SAAU,qBACVmE,MAAO,IAET,CACEnE,SAAU,uBACVmE,MAAO,IAET,CACEnE,SAAU,8BACVmE,MAAO,IAET,CACEnE,SAAU,YACVmE,MAAO,IAET,CACEnE,SAAU,SACVmE,MAAO,IAET,CACEnE,SAAU,YACVmE,MAAO,IAET,CACEnE,SAAU,UACVmE,MAAO,IAET,CACEnE,SAAU,SACVmE,MAAO,IAET,CACEnE,SAAU,MACVmE,MAAO,IAET,CACEnE,SAAU,cACVmE,MAAO,IAET,CACEnE,SAAU,iBACVmE,MAAO,IAET,CACEnE,SAAU,WACVmE,MAAO,KCtFL0C,G,YACJ,WAAYrG,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,CACXyC,eAAgB,GAChBE,cAAe,GACfE,gBAAiB,GACjBsB,eAAe,GAEjB,EAAKC,gBAAkB,EAAKA,gBAAgB9D,KAArB,gBACvB,EAAK+D,iBAAmB,EAAKA,iBAAiB/D,KAAtB,gBACxB,EAAKgE,uBAAyB,EAAKA,uBAAuBhE,KAA5B,gBAC9B,EAAKiE,kBAAoB,EAAKA,kBAAkBjE,KAAvB,gBACzB,EAAKkE,mBAAqB,EAAKA,mBAAmBlE,KAAxB,gBAC1B,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,KAAzB,gBAC3B,EAAKoE,kBAAoB,EAAKA,kBAAkBpE,KAAvB,gBACzB,EAAKqE,eAAiB,EAAKA,eAAerE,KAApB,gBAfL,E,iFAkBE,IAAD,EACgB1C,KAAKC,MAA/B+G,EADU,EACVA,WACR,GAFkB,EACE/D,UAGlB,OADApB,KACOmF,GAAW,GAEpBA,GAAW,GACXjF,O,uCAKA,OADsB/B,KAAKC,MAAnBgD,UAGJ,kBAAC,KAAD,CACEpF,UAAU,YACVoJ,KAAK,MACLxG,QAAUT,KAAK8G,oBAGf,kBAAC,KAAD,CACEjJ,UAAU,YACVoJ,KAAK,MACLxG,QAAUT,KAAK8G,sB,2CAMvB,OACET,GACGa,KAAI,SAACC,EAAMC,GAAP,OACH,4BAAQC,IAAMD,EAAQxD,MAAQuD,EAAKvD,OAASuD,EAAK1H,e,0CAKpC,IACXsF,EAAkB/E,KAAKoC,MAAvB2C,cACR,OACE,4BACE5E,GAAG,gBACHyD,MAAQmB,EACR3E,SAAWJ,KAAK6G,oBAChBhJ,UAAU,sBAEV,4BAAQ+F,MAAM,IAAd,UACA,4BAAQA,MAAM,YAAd,mBACA,4BAAQA,MAAM,WAAd,qB,wCAKa,IACTqB,EAAoBjF,KAAKoC,MAAzB6C,gBACR,OACE,4BACE9E,GAAG,kBACHyD,MAAQqB,EACR7E,SAAWJ,KAAK6G,oBAChBhJ,UAAU,sBAEV,4BAAQ+F,MAAM,IAAd,UACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,W,+CAKoB,IAAD,EAIU5D,KAAKoC,MAFpB3C,EAFK,EAErBoF,eACenF,EAHM,EAGrBqF,cACiBpF,EAJI,EAIrBsF,iBAEFqC,EAD8BtH,KAAKC,MAA3BqH,mBACU7H,EAAUC,EAASC,GACrCK,KAAKqD,SAAS,CACZkD,eAAe,M,0CAIChD,GAAI,IAAD,EACrBvD,KAAKqD,UAAL,mBACGE,EAAEO,OAAO3D,GAAKoD,EAAEO,OAAOF,OAD1B,+BAEiB,GAFjB,M,yCAMkB,IACV2C,EAAkBvG,KAAKoC,MAAvBmE,cACR,OAEE,yBAAK1I,UAAU,oBACb,4BACEI,KAAK,SACLJ,UAAU,2BACV4C,QAAUT,KAAK0G,wBAHjB,kBAOEH,EAEE,wBACE5I,MAAQ,CAAE4J,MAAO,UADnB,qBAMA,M,+BAKA,IACA1C,EAAmB7E,KAAKoC,MAAxByC,eACR,OACE,oCACE,yBAAKhH,UAAU,gBACb,yBAAKC,IAAM0J,IAAQxJ,IAAI,UAAUH,UAAU,mBAC3C,wBAAIK,cAAY,iBAAiBL,UAAU,eAA3C,aAEF,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,2BACb,2BAAOqC,QAAQ,mBAAf,cAEGF,KAAKwG,mBAER,2BAAOtG,QAAQ,iBAAf,eAEGF,KAAK2G,qBAER,2BAAOzG,QAAQ,kBAAf,YAEE,4BACEC,GAAG,iBACHyD,MAAQiB,EACRzE,SAAWJ,KAAK6G,oBAChBhJ,UAAU,sBAETmC,KAAK4G,uBAGR5G,KAAK+G,mBAGX,6BACC/G,KAAKyG,mBACN,6BACA,kBAAC,IAAD,CAAM/I,GAAG,IAAIC,MAAQ,CAAEC,eAAgB,SACrC,yBAAKC,UAAU,mBACb,yBAAKC,IAAM2J,KAAOzJ,IAAI,SAASH,UAAU,kBACzC,4BACEI,KAAK,SACLC,cAAY,cACZL,UAAU,2BAHZ,wB,GA3KQM,aAmMLqH,gBAVS,SAACpD,GAAD,MAAY,CAClCa,UAAWb,EAAMrD,UAAU+G,cAGF,SAACC,GAAD,MAAe,CACxCuB,kBAAmB,SAAC7H,EAAUC,EAASC,GAApB,OACjBoG,EAASvG,EAAwBC,EAAUC,EAASC,KACtDqH,WAAY,SAACnH,GAAD,OAAUkG,ER/DxB,SAAyBlG,GACvB,MAAO,CACL5B,KA/HsB,oBAgItB4B,QQ4D6B6H,CAAgB7H,QAGlC2F,CAA6Cc,IAQ5DA,GAAMhG,aAAe,CACnBgH,kBAAmBlB,IAAUrG,KAC7BiH,WAAYZ,IAAUrG,M,ICnNlB4H,G,YACJ,WAAY1H,GAAQ,IAAD,8BACjB,4CAAMA,KACD2H,KAAO,EAAKA,KAAKlF,KAAV,gBACZ,EAAKZ,KAAO,EAAKA,KAAKY,KAAV,gBACZ,EAAKmF,WAAa,EAAKA,WAAWnF,KAAhB,gBAJD,E,iFAOE,IAAD,QAElBoF,EADiC9H,KAAKC,MAA9B6H,sBACa9H,KAAK8B,KAAM9B,KAAK6H,YAErC7H,KAAK+H,MAAQC,aAAY,kBAAM,EAAKJ,SADxB,O,6CAKZK,cAAcjI,KAAK+H,S,mCAGP,IAAD,OAEX/H,KAAK+H,MAAQC,aAAY,kBAAM,EAAKJ,SADxB,O,6BAKZK,cAAcjI,KAAK+H,S,6BAGb,IAAD,EACmC/H,KAAKC,OAC7CiI,EAFK,EACGA,iBADH,EACoBC,WACI,K,+BAGrB,IACAA,EAAenI,KAAKC,MAApBkI,YAKJA,GAJS,GAIWnI,KAAK8B,OACzBqG,GAAcA,EAHH,KAIZjF,SAASC,cAAc,oBAAoBxF,MAAM4J,MAAQ,sBAExDY,GAAcA,GAPN,MAQGjF,SAASC,cAAc,oBAC/BxF,MAAM4J,MAAQ,sBAErB,OACE,6BACE,wBAAI1J,UAAU,cAAd,iBAEE,0BAAMA,UAAU,wCAAhB,WAA4DsK,U,GAnDlDhK,aAqELqH,gBALS,SAACpD,GAAD,MAAY,CAClC+F,WAAY/F,EAAMuD,cAAcyC,cAChCC,QAASjG,EAAMuD,cAAc2C,iBARJ,SAACvC,GAAD,MAAe,CACxCmC,gBAAiB,SAACK,GAAD,OAAUxC,ET5B7B,SAA+BwC,GAC7B,MAAO,CACLtK,KAtC6B,2BAuC7BsK,QSyBkCC,CAAsBD,KAC1DE,iBAAkB,SAACtJ,GAAD,OAAgB4G,EAAS7G,EAAcC,KACzD2I,qBAAsB,SAAC/H,EAAM2I,GAAP,OAAiB3C,ETfhC,CACL9H,KAlDgC,sBAmDhC6D,KSamE/B,ETZnE4I,MSYyED,QAQ9DlD,CAA6CmC,IAU5DA,GAAMrH,aAAe,CACnBwH,qBAAsB,GACtBI,gBAAiB,GACjBC,WAAY,I,8CCzFRS,GAAY,qBACZC,GAAU,mBAEhB,SAASC,KACP,IAAMC,EAAQ7F,SAAS8F,iBAAiBJ,IAClC3J,EAAUiE,SAASC,cAAc0F,IACvCE,EAAME,SAAQ,SAACC,GACbA,EAAQvL,MAAMwL,OAAS,8BAEzBlK,EAAQtB,MAAMwL,OAAS,4BAGzB,SAASC,KACP,IAAML,EAAQ7F,SAAS8F,iBAAiBJ,IAClC3J,EAAUiE,SAASC,cAAc0F,IACvCE,EAAME,SAAQ,SAACC,GACbA,EAAQ9F,UAAW,KAErBnE,EAAQmE,UAAW,EAGrB,SAASiG,KACP,IAAMN,EAAQ7F,SAAS8F,iBAAiBJ,IAClC3J,EAAUiE,SAASC,cAAc0F,IACvCE,EAAME,SAAQ,SAACC,GACbA,EAAQ9F,UAAW,KAErBnE,EAAQmE,UAAW,EAGrB,SAASkG,KAEP,GAAiC,IADPpG,SAAS8F,iBAAiB,qBAC9BnF,OAAc,CAClC,IAEM0F,EAAwBC,KAAKC,MADvB,EAC6BD,KAAKE,UAI9C,OAHiBxG,SAASC,cAAc,qBAC/BxF,MAAMgM,SAJI,CAAC,IAAK,KAIYJ,QACrC3K,QAAQC,IAAI,4CAGd,IAEM+K,EAA0BJ,KAAKC,MADxB,EAC8BD,KAAKE,UAC/BxG,SAASC,cAAc,qBAC/BxF,MAAMgM,SAJI,CAAC,IAAK,IAAK,IAAK,KAIEC,GACrChL,QAAQC,IAAI,yC,IC1CRgL,G,iLACM,IAAD,EAC+C7J,KAAKC,MAAnD6J,EADD,EACCA,gBAAiBC,EADlB,EACkBA,SAAUC,EAD5B,EAC4BA,eAC3BlJ,EAAegJ,EAAgBC,GAA/BjJ,WACR,OACE,yBAAKjD,UAAU,kBACb,oDACemD,OAAOgJ,GADtB,UAGA,+DAEIlJ,S,GAXiB3C,aAwBdqH,gBANS,SAACpD,GAAD,MAAY,CAClC0H,gBAAiB1H,EAAMrD,UAAUA,UACjCgL,SAAU3H,EAAMrD,UAAUgL,SAC1BC,eAAgB5H,EAAMmC,OAAO0F,mBAGhBzE,CAAyBqE,IAQxCA,GAAevJ,aAAe,CAC5ByJ,SAAU,EACVD,gBAAiB,GACjBE,eAAgB,G,ICtBZE,G,YACJ,WAAYjK,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,GAEb,EAAK+H,yBAA2B,EAAKA,yBAAyBzH,KAA9B,gBAChC,EAAK0H,qBAAuB,EAAKA,qBAAqB1H,KAA1B,gBAC5B,EAAK2H,oBAAsB,EAAKA,oBAAoB3H,KAAzB,gBANV,E,iFAUjB4G,KADkB,MAE0BtJ,KAAKC,MAAzCqK,EAFU,EAEVA,qBAFU,EAEYrH,WACff,KACfoI,EAAqBjB,M,6CAGC,IAAD,EAEMrJ,KAAKC,MADxBsK,EADa,EACbA,SAAUC,EADG,EACHA,YAAalG,EADV,EACUA,WAAYmG,EADtB,EACsBA,YACzCC,EAFmB,EAEnBA,UAAWzH,EAFQ,EAERA,UACbyH,IACA,IACMC,EADM,GACSH,EAAcxK,KAAK4K,WACxC5K,KAAKqK,oBAAoBM,EAAOrG,GAChCiG,EAASI,EAAQrG,EAAa,GAC9BmG,GAAY,GACZrB,KACInG,GPHN/B,GAAIK,MAAMU,S,oCOMIsB,GAAI,IAAD,EAIXvD,KAAKC,MAFP6J,EAFa,EAEbA,gBAA2B3J,EAFd,EAEI4J,SACjBU,EAHa,EAGbA,YAAaC,EAHA,EAGAA,UAAWzH,EAHX,EAGWA,UAElBnC,EAAegJ,EAAgB3J,GAA/BW,WAGR,OAFAd,KAAK4K,WAAa,EAEV9J,GACR,IAAK,OACHd,KAAK4K,WAAa,EAClB,MAEF,IAAK,SACH5K,KAAK4K,WAAa,EAClB,MAEF,IAAK,OACH5K,KAAK4K,WAAa,EAMA,oBAAhBrH,EAAEO,OAAO3D,GACXH,KAAKoK,uBACoB,sBAAhB7G,EAAEO,OAAO3D,KACd8C,GP7BR/B,GAAIS,MAAMM,OO8BNmH,KACAsB,IACAD,GAAY,M,0CAIIE,EAAOrG,GAAa,IAAD,EAKwBtE,KAAKC,MAHhEuE,EAFmC,EAEnCA,WACAE,EAHmC,EAGnCA,YACAI,EAJmC,EAInCA,2BACAE,EALmC,EAKnCA,0BAA2BE,EALQ,EAKRA,4BAGvBX,EAAS,CACbA,OAAQ,CACNf,KAAMgB,EACNF,WAAYA,EAAa,EACzBD,MANkBe,KAAKyF,MAAM1F,aAAa/C,OAAOmC,OAAOF,MAMjCsG,EACvBlG,cAAeC,EACfC,MAPYS,KAAKyF,MAAM1F,aAAa/C,OAAOmC,OAAOI,MAQlDE,eAAgBC,EAChBC,cAAeC,EACfC,gBAAiBC,IAGrBC,aAAa/C,MAAQgD,KAAKC,UAAUd,K,iDAGV,IAAD,SAENvE,KAAKC,MADhB6K,EADiB,EACjBA,eAAgBC,EADC,EACDA,gBACZ5K,EAFa,EAEvB4J,SACF,OACE,yBAAKlM,UAAU,oBACXiN,EAAe3K,GAAI+G,KAAI,SAACC,EAAMC,GAAP,OACvB,4BACEjH,GAAG,oBACHlC,KAAK,SACLoJ,IAAG,uBAAmBD,GACtBvJ,UAAU,mBACVK,cAAA,uBAA8BkJ,GAC9B3G,QAAU,SAAC8C,GAAQuF,KAAqB,EAAKkC,cAAczH,KAEzD4D,MAGN,4BACElJ,KAAK,SACLkC,GAAG,kBACHtC,UAAU,oCACVK,cAAY,iBACZuC,QAAU,SAAC8C,GAAQuF,KAAqB,EAAKkC,cAAczH,KAEzDwH,EAAgB5K,O,+BAMhB,IAAD,EAIHH,KAAKC,MAFP6J,EAFK,EAELA,gBAA2B3J,EAFtB,EAEY4J,SAAchK,EAF1B,EAE0BA,KAAMyK,EAFhC,EAEgCA,YAAaS,EAF7C,EAE6CA,kBAClDR,EAHK,EAGLA,YAHK,EAKwBX,EAAgB3J,GAAvCV,EALD,EAKCA,SAAUyL,EALX,EAKWA,SAOlB,OANIV,GAAe,IACjBpB,KACAN,KACA2B,GAAY,IAIZ,oCACE,kBAAC,GAAD,MACA,yBAAK5M,UAAU,sBACb,yBAAKA,UAAU,wBACb,yBAAKG,IAAI,GAAGF,IAAMqN,KAAQtN,UAAU,WACpC,yBAAKA,UAAU,gBACb,kBAAC,GAAD,MACA,wBAAIK,cAAY,oBAAoBL,UAAU,iBAA9C,YAEI4B,GAEJ,wBAAIvB,cAAY,gBAAgBL,UAAU,kBAAmBqN,IAE/D,yBAAKlN,IAAI,GAAGF,IAAMsN,KAAQvN,UAAU,YAEtC,6BACImC,KAAKmK,2BAELc,EACE,4BACEhN,KAAK,SACLwC,QAAUV,EACVlC,UAAU,wBACVK,cAAY,YAJd,QAOa,U,GA5JLC,aAgMTqH,gBA3BS,SAACpD,GAAD,MAAY,CAClC0H,gBAAiB1H,EAAMrD,UAAUA,UACjC+L,eAAgB1I,EAAMrD,UAAUsM,kBAChCN,gBAAiB3I,EAAMrD,UAAUgM,gBACjChB,SAAU3H,EAAMrD,UAAUgL,SAC1BuB,aAAclJ,EAAMuD,cAAc2C,aAClCkC,YAAapI,EAAMuD,cAAcyC,cACjCsC,UAAWtI,EAAMuD,cAAc4F,cAC/BN,kBAAmB7I,EAAMuD,cAAc8E,YACvCpG,MAAOjC,EAAMmC,OAAOF,MACpBC,WAAYlC,EAAMmC,OAAOD,WACzBE,WAAYpC,EAAMmC,OAAOf,KACzBkB,YAAatC,EAAMmC,OAAOE,cAC1BK,2BAA4B1C,EAAMuD,cAAcC,cAChDZ,0BAA2B5C,EAAMuD,cAAcE,YAC/CX,4BAA6B9C,EAAMuD,cAAchG,UACjDsD,UAAWb,EAAMrD,UAAU+G,cAGF,SAACC,GAAD,MAAe,CACxCwE,SAAU,SAACI,EAAOrG,GAAR,OAAuByB,EZhInC,SAA6ByF,EAAUlH,GACrC,MAAO,CACLrG,KArE0B,wBAsE1BuN,WACAlH,cY4HwCmH,CAAoBd,EAAOrG,KACrEmG,YAAa,SAACpL,GAAD,OAAa0G,EAASzG,EAAcD,KACjDiL,qBAAsB,SAACvK,GAAD,OAAUgG,EZnHlC,SAAyChG,GACvC,MAAO,CACL9B,KAlFyC,uCAmFzC8B,QYgHuC2L,CAAgC3L,KACzE4L,mBAAoB,SAAC9L,GAAD,OAAUkG,EAAS3G,EAAYS,KACnD+L,wBAAyB,kBAAM7F,EAASxG,SAG3BiG,CAA6C0E,IAuB5DA,GAAU5J,aAAe,CACvByJ,SAAU,EACVD,gBAAiB,GACjB/J,KAAM,GACNwK,SAAUnE,IAAUrG,KACpB0K,YAAarE,IAAUrG,KACvBuK,qBAAsBlE,IAAUrG,KAChC2K,UAAWtE,IAAUrG,KACrB+K,eAAgB1E,IAAUyF,QAAQC,OAClCf,gBAAiB3E,IAAUyF,QAAQC,Q,yBC5O/BC,G,iLACM,IAAD,EAC2C/L,KAAKC,MAA/C+L,EADD,EACCA,WAAYC,EADb,EACaA,YAAaC,EAD1B,EAC0BA,aACjC,OACE,6BACE,4BAAQrO,UAAU,eAChB,yBACEC,IAAMkO,EACN9N,cAAY,yBACZF,IAAI,iBAEN,0BACEE,cAAY,qBACZL,UAAU,sBAERoO,GAEJ,yBAAKpO,UAAU,uBACb,0BAAMA,UAAU,cAAhB,SAGA,0BACEA,UAAU,sBACVK,cAAY,gBAEVgO,KAKR,yBAAKrO,UAAU,iBACb,yBAAKC,IAAMqL,KAASnL,IAAI,GAAGH,UAAU,qB,GA/B1BM,aAgDNqH,gBAVS,SAACpD,GAAD,MAAY,CAClC4J,WAAY5J,EAAMmC,OAAOmB,eACzBuG,YAAa7J,EAAMmC,OAAOf,KAC1B0I,aAAc9J,EAAMmC,OAAOF,SAOdmB,CAAyBuG,ICrDxC,SAASI,GAAsBjG,GAY7B,OAXgBA,EAAagB,KAAI,SAACC,GAShC,OADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAKiF,QAAQ,WAAY,MACpBA,QAAQ,WAAY,KACpBA,QAAQ,aAAc,SACtBA,QAAQ,UAAW,KACnBA,QAAQ,SAAU,KAClBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,KACfA,QAAQ,MAAO,OAM/B,SAASC,GAAyBnG,GAehC,OAdcA,EAAagB,KAAI,SAACC,GAY9B,OAXgBA,EAAKD,KAAI,SAACoF,GASxB,OADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAQA,EAAMF,QAAQ,WAAY,MACpBA,QAAQ,WAAY,KACpBA,QAAQ,aAAc,SACtBA,QAAQ,UAAW,KACnBA,QAAQ,SAAU,KAClBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,KACfA,QAAQ,MAAO,UAQnC,SAASG,GAAgBrG,GAYvB,OAXkBA,EAAagB,KAAI,SAACC,GASlC,OARAA,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,WAAY,KAClDjF,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,WAAY,IAClDjF,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,aAAc,QACpDjF,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,UAAW,IACjDjF,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,SAAU,IAChDjF,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,OAAQ,IAC9CjF,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,MAAO,IAC7CjF,EAAK+D,SAAW/D,EAAK+D,SAASkB,QAAQ,MAAO,IACtCjF,K,ICdIqF,G,iLAxBX,OACE,yBAAK3O,UAAU,eACb,uBAAGA,UAAU,qBAAb,wHAGE,6BAHF,+HAMA,kBAAC,IAAD,CAAMH,GAAG,IAAIC,MAAQ,CAAEC,eAAgB,SACrC,yBAAKC,UAAU,mBACb,4BACEI,KAAK,SACLC,cAAY,cACZL,UAAU,2BAHZ,wB,GAZkBM,aCoBfsO,G,iLAlBX,OAEE,yBAAK5O,UAAU,gBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,WAAf,wBAGA,yBAAKA,UAAU,mBACf,8BAGF,kBAAC,GAAD,W,GAbcM,aCkBhBuO,G,YACJ,WAAYzM,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,CACXuK,oBAAoB,EACpBC,kBAAkB,GAEpB,EAAKC,mBAAqB,EAAKA,mBAAmBnK,KAAxB,gBAC1B,EAAKoK,0BAA4B,EAAKA,0BAA0BpK,KAA/B,gBACjC,EAAKqK,gBAAkB,EAAKA,gBAAgBrK,KAArB,gBACvB,EAAKsK,yBAA2B,EAAKA,yBAAyBtK,KAA9B,gBATf,E,iFAYE,IAAD,SAEmB1C,KAAKC,MADlCgN,EADU,EACVA,wBACNC,EAFgB,EAEhBA,+BAFgB,EAUd9H,KAAKyF,MAAM1F,aAAa/C,OAAOmC,OANjCf,EAJgB,EAIhBA,KACAiB,EALgB,EAKhBA,cACO0I,EANS,EAMhBxI,MACgBlF,EAPA,EAOhBoF,eACenF,EARC,EAQhBqF,cACiBpF,EATD,EAShBsF,gBAEIN,EAAQwI,EACdD,EAA+BzN,EAAUC,EAASC,GAClDsN,EAAwBzJ,EAAMiB,EAAeE,GAC7C,IAAMJ,EAAS,CACbA,OAAQ,CACNf,OACAc,WAAY,EACZD,MAAO,EACPI,gBACAE,MAAOwI,EACPtI,eAAgBpF,EAChBsF,cAAerF,EACfuF,gBAAiBtF,IAIrBwF,aAAa/C,MAAQgD,KAAKC,UAAUd,GACpC6I,YAAW,WACT,EAAKL,oBAHM,O,iJAcT/M,KAAKC,MALPU,E,EAAAA,MACAsF,E,EAAAA,iBAC4BxG,E,EAA5BqF,2BAC2BpF,E,EAA3BsF,0BAC8BlE,E,EAA9BuM,6B,mBAE6BzM,EAAaD,EAAOlB,EAAUC,EAASoB,I,OAAhEwM,E,OAEApH,EAAe,GACrBoH,EAAiBrE,SAAQ,SAAC9B,GACxBjB,EAAaqH,KAAKpG,MAGdqG,EAAgB,GACtBF,EAAiBrE,SAAQ,SAAC9B,GACxBqG,EAAcD,KAAKpG,EAAKsG,sBAGpBC,EAAc,GACpBJ,EAAiBrE,SAAQ,SAAC9B,GACxBuG,EAAYH,KAAKpG,EAAKwG,mBAGlB5O,EAAYwN,GAAgBrG,GAC5B0H,EAAqBvB,GAAyBmB,GAC9CK,EAAmB1B,GAAsBuB,GAE/CzH,EAAiBlH,EAAW6O,EAAoBC,GAChD7N,KAAKqD,SAAS,CACZuJ,kBAAkB,I,mGAIM,IAAD,OACjBkB,EAAuB9N,KAAKC,MAA5B6N,mBAERV,YAAW,WACLU,EAAmBjK,OAAS,IAE9BkK,EADwB,EAAK9N,MAArB8N,cACI,KAJA,O,2CASI,IAAD,EAMf/N,KAAKC,MAJP+N,EAFiB,EAEjBA,WAAYjE,EAFK,EAELA,SAAUkE,EAFL,EAEKA,eAAgBC,EAFrB,EAEqBA,WACtCzD,EAHiB,EAGjBA,YAAa0D,EAHI,EAGJA,kBACbC,EAJiB,EAIjBA,eAAgBC,EAJC,EAIDA,iBAAkBzC,EAJjB,EAIiBA,wBAClC3I,EALiB,EAKjBA,UAEFqG,KACAmB,GAAY,GACZuD,EAAWjE,EAAW,GACtBoE,IACAvC,IACAqC,EA1GW,IA2GXC,IACAlO,KAAK8M,4BAIL,GZlFF5L,GAAIK,MAAMO,OACVZ,GAAIS,MAAMG,OYgFJmB,GAAamL,EAFM,GAE2BlM,KAF3B,IAGnBkM,EAEF,OADAC,IAEErO,KAAKqD,SAAS,CACZsJ,oBAAoB,M,kDAO1B,IAAM5D,EAAQ7F,SAAS8F,iBAAiB,sBAClC/J,EAAUiE,SAASC,cAAc,oBACvC4F,EAAME,SAAQ,SAACC,GACbA,EAAQvL,MAAMwL,OAAS,MAEzBlK,EAAQtB,MAAMwL,OAAS,K,+BAGf,IAAD,EAC0CnJ,KAAKoC,MAA9CuK,EADD,EACCA,mBAAoBC,EADrB,EACqBA,iBACpB5K,EAAYhC,KAAKC,MAAjB+B,QACR,OAAI2K,EAA2B,kBAAC,IAAD,CAAUjP,GAAG,cAE1C,oCACGsC,KAAKgN,2BACN,kBAAC,GAAD,MACA,yBAAKnP,UAAU,kBAEXmE,GAAW4K,EAAmB,kBAAC,GAAD,CAC5B7M,KAAOC,KAAK6M,qBACT,kBAAC,GAAD,Y,GA7IE1O,aAoLJqH,gBA/BS,SAACpD,GAAD,MAAY,CAClC2H,SAAU3H,EAAMrD,UAAUgL,SAC1BmE,WAAY9L,EAAMuD,cAAc2I,eAChCC,cAAenM,EAAMuD,cAAc4F,cACnC4C,kBAAmB/L,EAAMuD,cAAc6I,mBACvClD,aAAclJ,EAAMuD,cAAc2C,aAClC8F,eAAgBhM,EAAMmC,OAAO0F,gBAC7BtJ,MAAOyB,EAAMmC,OAAO5D,MACpBmE,2BAA4B1C,EAAMuD,cAAcC,cAChDZ,0BAA2B5C,EAAMuD,cAAcE,YAC/CwH,6BAA8BjL,EAAMuD,cAAchG,UAClDqC,QAASI,EAAMrD,UAAUiD,QACzB8L,mBAAoB1L,EAAMrD,UAAUA,UACpCkE,UAAWb,EAAMrD,UAAU+G,cAGF,SAACC,GAAD,MAAe,CACxCiI,WAAY,SAACxC,GAAD,OAAczF,EjB/H5B,SAA4ByF,GAC1B,MAAO,CACLvN,KAzDyB,uBA0DzBuN,YiB4HiCiD,CAAmBjD,KACtDkD,aAAc,SAACrP,GAAD,OAAa0G,EAAS3G,EAAYC,KAChD4O,eAAgB,SAAC9O,GAAD,OAAgB4G,EAAS7G,EAAcC,KACvDsL,YAAa,SAACpL,GAAD,OAAa0G,EAASzG,EAAcD,KACjDuM,wBAAyB,kBAAM7F,EAASxG,MACxC8O,iBAAkB,kBAAOtI,EjBxFlB,CACL9H,KA7FF,mDiBqLAgI,iBAAkB,SAACqG,EAAOqC,EAAKC,GAAb,OAAuB7I,EAASjH,EAAcwN,EAAOqC,EAAKC,KAC5E3B,wBAAyB,SAACzJ,EAAME,EAAOyJ,GAAd,OACvBpH,EjB9EJ,SAAwCvC,EAAME,EAAOyJ,GACnD,MAAO,CACLlP,KAzGwC,sCA0GxCuF,OACAE,QACAyJ,OiByES0B,CAA+BrL,EAAME,EAAOyJ,KACvDD,+BAAgC,SAACzN,EAAUC,EAASC,GAApB,OAC9BoG,EAASvG,EAAwBC,EAAUC,EAASC,KACtDoO,YAAa,SAAClO,GAAD,OAAUkG,EAASnG,EAAwBC,QAG3C2F,CAA6CkH,IAyB5DA,GAAKpM,aAAe,CAClByJ,SAAU,EACVkE,eAAgB7H,IAAUrG,KAC1BmO,WAAY9H,IAAUrG,KACtB0K,YAAarE,IAAUrG,KACvBoO,kBAAmB/H,IAAUrG,KAC7BsO,iBAAkBjI,IAAUrG,KAC5BkG,iBAAkBG,IAAUrG,KAC5BkN,wBAAyB7G,IAAUrG,KACnC6L,wBAAyBxF,IAAUrG,KACnCmN,+BAAgC9G,IAAUrG,KAC1CgO,YAAa3H,IAAUrG,KACvBiC,SAAS,G,4CCpOL8M,G,YACJ,WAAY7O,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,GAGb,EAAK2M,mBAAqB,EAAKA,mBAAmBrM,KAAxB,gBAC1B,EAAKsM,qBAAuB,EAAKA,qBAAqBtM,KAA1B,gBAC5B,EAAKuM,UAAY,EAAKA,UAAUvM,KAAf,gBACjB,EAAKwM,sBAAwB,EAAKA,sBAAsBxM,KAA3B,gBARZ,E,kFAYjB1C,KAAKgP,wBAEL/K,EADyBjE,KAAKC,MAAtBgE,eACK,K,6CAGS,IAAD,EACYjE,KAAKC,MAChCkP,EAAc,CAClB3L,KAHmB,EACbA,KAGNa,MAJmB,EACPA,MAIZ+K,QALmB,EACAA,SAMrB,GAAKjK,aAAakK,SAA2C,IAAhClK,aAAakK,QAAQxL,OAE3C,CACL,IAAMyL,EAAsBlK,KAAKyF,MAAM1F,aAAakK,SACpDC,EAAoB/B,KAAK4B,GACzBhK,aAAakK,QAAUjK,KAAKC,UAAUiK,QAJtCnK,aAAakK,QAAUjK,KAAKC,UAAU,CAAC8J,M,+CAUzClL,EADyBjE,KAAKC,MAAtBgE,eACK,K,kCAKb,OACE,4BACEhG,KAAK,SACLC,cAAY,iBACZL,UAAU,0BACV4C,QAAUT,KAAKkP,uBAJjB,gB,+BAUM,IAAD,EACsBlP,KAAKC,MAA1BoE,EADD,EACCA,MAAOkL,EADR,EACQA,UAEf,OACE,oCACE,kBAAC,GAAD,MACA,yBAAK1R,UAAU,iBAEb,wBAAIK,cAAY,gBAAgBL,UAAU,iBAA1C,aAGA,wBAAIK,cAAY,gBAAgBL,UAAU,4BACtC0R,EAViB,EAUgB,mBAAqB,aAE1D,wBACErR,cAAY,uBACZL,UAAU,eAERwG,GAEJ,wBACEnG,cAAY,0BACZL,UAAU,mBAER0R,EACF,+CAEF,kBAAC,IAAD,CAAM7R,GAAG,IAAIC,MAAQ,CAAEC,eAAgB,SACrC,yBAAKC,UAAU,kBACb,yBAAKC,IAAM2J,KAAOzJ,IAAI,SAASH,UAAU,aACvCmC,KAAKiP,cAGX,kBAAC,IAAD,CAAMvR,GAAG,WAAWC,MAAQ,CAAEC,eAAgB,SAC5C,yBAAKC,UAAU,mBACb,yBAAKC,IAAM0R,KAASxR,IAAI,UAAUH,UAAU,gBAC5C,4BACE4C,QAAUT,KAAK+O,mBACf9Q,KAAK,SACLC,cAAY,cACZL,UAAU,6BAJZ,wB,GAxFSM,aAmHRqH,gBAXS,SAACpD,GAAD,MAAY,CAClCgN,QAAShN,EAAMmC,OAAOmB,eACtBlC,KAAMpB,EAAMmC,OAAOf,KACnBa,MAAOjC,EAAMmC,OAAOF,MACpBkL,UAAWnN,EAAMmC,OAAOD,eAGC,SAACyB,GAAD,MAAe,CACxC9B,aAAc,SAACpE,GAAD,OAAUkG,EAASnG,EAAwBC,QAG5C2F,CAA6CsJ,IAU5DA,GAASxO,aAAe,CACtB2D,aAAcmC,IAAUrG,M,IC/HpB0P,G,YACJ,WAAYxP,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,CACXsN,cAAc,GAEhB,EAAKC,cAAgB,EAAKA,cAAcjN,KAAnB,gBACrB,EAAKkN,qBAAuB,EAAKA,qBAAqBlN,KAA1B,gBANX,E,qFAWjBuB,EADyBjE,KAAKC,MAAtBgE,eACK,GACbjE,KAAKqD,SAAS,CACZqM,cAAc,M,sCAOhB,OAFgBtK,KAAKyF,MAAM1F,aAAakK,SACVQ,MAAK,SAACvR,EAAGwR,GAAJ,OAAUA,EAAEzL,MAAQ/F,EAAE+F,SAEzC6C,KAAI,SAAC6I,EAAM3I,GAAP,OAChB,oCACE,yBAAKvJ,UAAU,iBAAiBwJ,IAAMD,GACpC,0BAAMvJ,UAAU,kBAAmBuJ,EAAQ,GAC3C,yBAAKtJ,IAAMiS,EAAKX,QAAUpR,IAAM+R,EAAKvM,OACrC,uBACEtF,cAAA,sBAA6BkJ,GAC7BvJ,UAAU,uBAERkS,EAAKvM,MAET,uBACEtF,cAAA,uBAA8BkJ,GAC9BvJ,UAAU,iBAERkS,EAAK1L,QAGX,mC,+BAQN,OADyBrE,KAAKoC,MAAtBsN,aACiB,kBAAC,IAAD,CAAUhS,GAAG,MAEpC,yBAAKG,UAAU,gBACb,yBAAKA,UAAU,kBACb,yBAAKC,IAAM0R,KAASxR,IAAI,UAAUH,UAAU,uBAC5C,wBAAIK,cAAY,gBAAgBL,UAAU,iBAA1C,YAEF,yBAAKA,UAAU,qBACXmC,KAAK2P,iBAET,yBAAK9R,UAAU,qBACb,yBAAKC,IAAM2J,KAAOzJ,IAAI,SAASH,UAAU,kBACzC,4BACEI,KAAK,SACLC,cAAY,cACZL,UAAU,0BACV4C,QAAUT,KAAK4P,sBAJjB,uB,GA5DYzR,aA8EPqH,eAAQ,MAJI,SAACO,GAAD,MAAe,CACxC9B,aAAc,SAACpE,GAAD,OAAUkG,EAASnG,EAAwBC,QAG5C2F,CAAkCiK,IAMjDA,GAAQnP,aAAe,CACrB2D,aAAcmC,IAAUrG,M,yBCFXiQ,G,YApFb,WAAY/P,GAAQ,IAAD,8BACjB,4CAAMA,KACDgQ,cAAgB,EAAKA,cAAcvN,KAAnB,gBACrB,EAAKwN,MAAQ,EAAKA,MAAMxN,KAAX,gBAHI,E,6EAOjB,OACE,kBAAC,IAAD,CAAMhF,GAAG,IAAIC,MAAQ,CAAEC,eAAgB,SACrC,yBAAKC,UAAU,mBACb,yBAAKC,IAAM2J,KAAOzJ,IAAI,SAASH,UAAU,kBACzC,4BACEI,KAAK,SACLJ,UAAU,2BAFZ,qB,8BAYN,OACE,yBAAKA,UAAU,eACb,yBAAKC,IAAMqS,KAAStS,UAAU,QAAQG,IAAI,KAC1C,wBAAIH,UAAU,cAAd,gBAGA,wBAAIA,UAAU,cAAd,iBAGA,wBAAIA,UAAU,cAAd,kBAGA,wBAAIA,UAAU,cAAd,oBAIA,yBAAKC,IAAMsS,KAASvS,UAAU,QAAQG,IAAI,Q,+BAM9C,OACE,yBAAKH,UAAU,SACb,yBAAKA,UAAU,gBACb,yBAAKC,IAAMwH,IAAQtH,IAAI,GAAGH,UAAU,cACpC,wBAAIA,UAAU,eAAd,YACA,0BAAMA,UAAU,cAAhB,cAEF,8FACA,qFACEmC,KAAKkQ,QACP,uBAAGrS,UAAU,qBAAb,gGAIA,uBAAGA,UAAU,qBAAb,2LAKA,uBAAGA,UAAU,qBAAb,6CAGA,uBAAGA,UAAU,qBAAb,8FAKA,uBAAGA,UAAU,qBAAb,6EAEE,6BAFF,0FAMEmC,KAAKiQ,qB,GA/EK9R,a,oDCEdkS,GAAgB,CACpBtG,SAAU,EACVhL,UAAW,GACXsM,kBAAmB,GACnBN,gBAAiB,GACjB/I,SAAS,EACT8D,WAAW,GAsCEwK,OAnCf,WAAgD,IAAhClO,EAA+B,uDAAvBiO,GAAeE,EAAQ,uCAC7C,OAAQA,EAAOtS,MACf,IrBnBqB,iBqBoBnB,OAAO,gBACFmE,EADL,CAEErD,UAAU,aAAKwR,EAAOxR,WACtBsM,kBAAmBkF,EAAOvR,UAC1B+L,gBAAiBwF,EAAOtR,UAE5B,IrBtB2B,uBqBuBzB,OAAO,gBACFmD,EADL,CAEE2H,SAAUwG,EAAO/E,WAErB,IrBpBA,gDqBqBE,OAAO,gBACFpJ,EADL,CAEE2H,SAAU,IAEd,IrBrBgC,4BqBsB9B,OAAO,gBACF3H,EADL,CAEEJ,QAASuO,EAAO1Q,OAEpB,IrBzBwB,oBqB0BtB,OAAO,gBACFuC,EADL,CAEE0D,UAAWyK,EAAO1Q,OAGtB,QACE,OAAOuC,ICvCLiO,GAAgB,CACpB7M,KAAM,GACNc,WAAY,EACZD,MAAO,EACPI,cAAe,GACfiB,eAAgB,GAChB/E,MAAO,GACPsJ,gBAAiB,GAgDJ1F,OA7Cf,WAAgD,IAAhCnC,EAA+B,uDAAvBiO,GAAeE,EAAQ,uCAC7C,OAAQA,EAAOtS,MACf,ItBtB4B,wBsBuB1B,OAAO,gBACFmE,EADL,CAEEsD,eAAgB6K,EAAOzS,IACvB0F,KAAM+M,EAAO/M,KACbiB,cAAe8L,EAAO7M,MACtB/C,MAAO4P,EAAO5P,QAElB,ItBvB4B,wBsBwB1B,OAAO,gBACFyB,EADL,CAEEiC,MAAOjC,EAAMiC,MAAQkM,EAAO/E,SAC5BlH,WAAYiM,EAAOjM,aAEvB,ItB1B2B,uBsB2BzB,OAAO,gBACFlC,EADL,CAEE6H,gBAAiB7H,EAAM6H,gBAAkB,IAE7C,ItB7BA,gDsB8BE,OAAO,gBACF7H,EADL,CAEE6H,gBAAiB,IAErB,ItBjCyB,qBsBkCvB,OAAO,gBACF7H,EADL,CAEEiC,MAAOkM,EAAOlM,MACdC,WAAYiM,EAAOjM,aAEvB,ItBtC0C,sCsBuCxC,OAAO,gBACFlC,EADL,CAEEoB,KAAM+M,EAAO/M,KACbiB,cAAe8L,EAAO7M,MACtBgC,eAAgB6K,EAAOpD,MAG3B,QACE,OAAO/K,ICnDLiO,GAAgB,CACpBjI,cAAe,GACfE,cAAc,EACdmC,aAAa,EACb7E,cAAe,GACfC,YAAa,GACblG,UAAW,IAoDEgG,OAjDf,WAAuD,IAAhCvD,EAA+B,uDAAvBiO,GAAeE,EAAQ,uCACpD,OAAQA,EAAOtS,MACf,IvBlBqB,iBuBmBnB,OAAO,gBACFmE,EADL,CAEEgG,cAAemI,EAAOpR,aAG1B,IvBzB+B,2BuB0B7B,OAAO,gBACFiD,EADL,CAEEgG,cAAemI,EAAOhI,OAG1B,IvB7BkC,sBuB8BhC,OAAO,gBACFnG,EADL,CAEEmJ,cAAegF,EAAOzO,KACtBwM,eAAgBiC,EAAO5H,QAG3B,IvBlCmB,euBmCjB,OAAO,gBACFvG,EADL,CAEEkG,aAAciI,EAAOlR,UAEzB,IvBrCsB,kBuBsCpB,OAAO,gBACF+C,EADL,CAEEqI,YAAa8F,EAAOlR,UAExB,IvBzC2C,uCuB0CzC,OAAO,gBACF+C,EADL,CAEEoM,mBAAoB+B,EAAOxQ,OAE/B,IvBxC0B,sBuByCxB,OAAO,gBACFqC,EADL,CAEEwD,cAAe2K,EAAO9Q,SACtBoG,YAAa0K,EAAO7Q,QACpBC,UAAW4Q,EAAO5Q,YAGtB,QACE,OAAOyC,ICrDIoO,GANMC,2BAAgB,CACnC1R,aACAwF,UACAoB,mBCEa+K,GALDC,uBACZC,GACAC,+BAAoBC,2BAAgBC,QCCtCC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAQA,IAChB,kBAAC,IAAD,CAAYQ,SAAS,KACnB,mBCDS,WACb,OACE,yBAAKrT,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsT,OAAK,EAACC,KAAK,UAAS,kBAAC,GAAD,OAC3B,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,IAAIH,OAAS,kBAAM,kBAAC,GAAD,SACrC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,QAAQH,OAAS,kBAAM,kBAAC,GAAD,SACzC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,YAAYH,OAAS,kBAAM,kBAAC,GAAD,SAC7C,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,WAAWC,UAAY5B,KACzC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,SAASC,UAAYrB,SDRzC,QAGJ9M,SAASoO,eAAe,U,wCEd1B/T,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.7dd8268b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/ShowDoMilhaoTheme.2bb4c1b0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/certaResposta.8f1e336b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/proximaPergunta.99df652c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Errou.4ba5d393.mp3\";","module.exports = __webpack_public_path__ + \"static/media/quots_2.81fd41c1.png\";","module.exports = __webpack_public_path__ + \"static/media/quots_1.d696b7bd.png\";","module.exports = __webpack_public_path__ + \"static/media/header_base.c84b8e19.png\";","module.exports = __webpack_public_path__ + \"static/media/back_1.10a134b1.png\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport settingsIMG from '../images/gear.png';\n\nclass btnSetupScreen extends Component {\n  render() {\n    return (\n      <Link to=\"/Setup\" style={ { textDecoration: 'none' } }>\n        <div className=\"div-btn-settings\">\n          <div className=\"btn-div-img-settings\">\n            <img src={ settingsIMG } alt=\"Configurações\" className=\"btn-img-settings\" />\n          </div>\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            className=\"btn-neon-blue setup-btn\"\n          >\n            Settings\n          </button>\n        </div>\n      </Link>\n    );\n  }\n}\n\nexport default btnSetupScreen;\n","const ENDPOINT = 'https://www.gravatar.com/avatar/';\n\nasync function fetchGravatar(hash) {\n  try {\n    const response = await fetch(`${ENDPOINT}${hash}`);\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport default fetchGravatar;\n","const SEND_GRAVATAR_SRC_IMG = 'SEND_GRAVATAR_SRC_IMG';\nconst SEND_QUESTIONS = 'SEND_QUESTIONS';\nconst DECREASE_TIME_TO_RESPOND = 'DECREASE_TIME_TO_RESPOND';\nconst INITIATE_TIMER = 'INITIATE_TIMER';\nconst STOP_N_RESET_TIMER_FUNCTION = 'STOP_TIMER_FUNCTION';\nconst QUESTION_ID_INCREASE = 'QUESTION_ID_INCREASE';\nconst MODIFY_TIMER = 'MODIFY_TIMER';\nconst INCREASE_PLAYER_SCORE = 'INCREASE_PLAYER_SCORE';\nconst MODIFY_NEXT_BTN = 'MODIFY_NEXT_BTN';\nconst ALLOW_QUESTIONS_BTN_AFTER_NEXT_CLICK = 'ALLOW_QUESTIONS_BTN_AFTER_NEXT_CLICK';\nconst ADD_QUESTIONS_PLAYED = 'ADD_QUESTIONS_PLAYED';\nconst RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS = (\n  'RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS');\nconst RESET_STORE_SCORES = 'RESET_STORE_SCORES';\nconst RECOVER_NAME_AND_EMAIL_FROM_REFRESH = 'RECOVER_NAME_AND_EMAIL_FROM_REFRESH';\nconst SEND_CONFIG_OPTIONS = 'SEND_CONFIG_OPTIONS';\nconst MODIFY_PLAYING_TRUE_FALSE = 'MODIFY_PLAYING_TRUE_FALSE';\nconst MODIFY_PLAY_SOUND = 'MODIFY_PLAY_SOUND';\n\nfunction sendGravatarSrcImg(name, src, email, token) {\n  return {\n    type: SEND_GRAVATAR_SRC_IMG,\n    name,\n    src,\n    email,\n    token,\n  };\n}\n\nfunction sendQuestions(questions, incorrect, correct) {\n  return {\n    type: SEND_QUESTIONS,\n    questions,\n    incorrect,\n    correct,\n  };\n}\n\nfunction decreaseTimeToRespond(time) {\n  return {\n    type: DECREASE_TIME_TO_RESPOND,\n    time,\n  };\n}\n\nfunction InitiateTimer(startTimer) {\n  return {\n    type: INITIATE_TIMER,\n    startTimer,\n  };\n}\n\nfunction stopAndResetFunction(stop, reset) {\n  return {\n    type: STOP_N_RESET_TIMER_FUNCTION,\n    stop,\n    reset,\n  };\n}\n\nfunction questionIdIncrease(increase) {\n  return {\n    type: QUESTION_ID_INCREASE,\n    increase,\n  };\n}\n\nfunction modifyTimer(boolean) {\n  return {\n    type: MODIFY_TIMER,\n    boolean,\n  };\n}\n\nfunction increasePlayerScore(increase, assertions) {\n  return {\n    type: INCREASE_PLAYER_SCORE,\n    increase,\n    assertions,\n  };\n}\n\nfunction modifyNextBtn(boolean) {\n  return {\n    type: MODIFY_NEXT_BTN,\n    boolean,\n  };\n}\n\nfunction allowQuestionsBtnAfterNextClick(func) {\n  return {\n    type: ALLOW_QUESTIONS_BTN_AFTER_NEXT_CLICK,\n    func,\n  };\n}\n\nfunction addQuestionsPlayed(questions) {\n  return {\n    type: ADD_QUESTIONS_PLAYED,\n    questions,\n  };\n}\n\nfunction resetTriviaQuestionsIdAndPlayedQuestions() {\n  return {\n    type: RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS,\n  };\n}\n\nfunction resetStoreScores(score, assertions) {\n  return {\n    type: RESET_STORE_SCORES,\n    score,\n    assertions,\n  };\n}\n\nfunction recoverNameAndEmailFromRefresh(name, email, img) {\n  return {\n    type: RECOVER_NAME_AND_EMAIL_FROM_REFRESH,\n    name,\n    email,\n    img,\n  };\n}\n\nfunction sendConfigOptionsAction(category, answear, dificulty) {\n  return {\n    type: SEND_CONFIG_OPTIONS,\n    category,\n    answear,\n    dificulty,\n  };\n}\n\nfunction modifyPlayingTruOrFalse(bool) {\n  return {\n    type: MODIFY_PLAYING_TRUE_FALSE,\n    bool,\n  };\n}\n\nfunction modifyPlaySound(bool) {\n  return {\n    type: MODIFY_PLAY_SOUND,\n    bool,\n  };\n}\n\nexport {\n  SEND_GRAVATAR_SRC_IMG,\n  sendGravatarSrcImg,\n  SEND_QUESTIONS,\n  sendQuestions,\n  decreaseTimeToRespond,\n  DECREASE_TIME_TO_RESPOND,\n  InitiateTimer,\n  INITIATE_TIMER,\n  stopAndResetFunction,\n  STOP_N_RESET_TIMER_FUNCTION,\n  QUESTION_ID_INCREASE,\n  questionIdIncrease,\n  modifyTimer,\n  MODIFY_TIMER,\n  INCREASE_PLAYER_SCORE,\n  increasePlayerScore,\n  modifyNextBtn,\n  MODIFY_NEXT_BTN,\n  allowQuestionsBtnAfterNextClick,\n  ALLOW_QUESTIONS_BTN_AFTER_NEXT_CLICK,\n  ADD_QUESTIONS_PLAYED,\n  addQuestionsPlayed,\n  resetTriviaQuestionsIdAndPlayedQuestions,\n  RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS,\n  RESET_STORE_SCORES,\n  resetStoreScores,\n  RECOVER_NAME_AND_EMAIL_FROM_REFRESH,\n  recoverNameAndEmailFromRefresh,\n  sendConfigOptionsAction,\n  SEND_CONFIG_OPTIONS,\n  modifyPlayingTruOrFalse,\n  MODIFY_PLAYING_TRUE_FALSE,\n  modifyPlaySound,\n  MODIFY_PLAY_SOUND,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputName extends Component {\n  render() {\n    const { func } = this.props;\n    return (\n      <label htmlFor=\"inputName\" className=\"inputName\">\n        <input\n          type=\"text\"\n          id=\"inputName\"\n          data-testid=\"input-player-name\"\n          onChange={ func }\n          placeholder=\"Name\"\n          className=\"inputNeon-blue\"\n        />\n      </label>\n    );\n  }\n}\n\nexport default InputName;\n\nInputName.propTypes = {\n  func: PropTypes.func,\n};\n\nInputName.defaultProps = {\n  func: {},\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputEmail extends Component {\n  render() {\n    const { func } = this.props;\n    return (\n      <label htmlFor=\"inputEmail\" className=\"inputEmail\">\n        <input\n          type=\"email\"\n          id=\"inputEmail\"\n          data-testid=\"input-gravatar-email\"\n          onChange={ func }\n          placeholder=\"Email\"\n          className=\"inputNeon-blue\"\n        />\n      </label>\n    );\n  }\n}\n\nexport default InputEmail;\n\nInputEmail.propTypes = {\n  func: PropTypes.func,\n};\n\nInputEmail.defaultProps = {\n  func: {},\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass PlayBtn extends Component {\n  render() {\n    const { func } = this.props;\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"btn-play\"\n        id=\"play-btn\"\n        onClick={ func }\n        className=\"btn-neon-red\"\n      >\n        Play\n      </button>\n    );\n  }\n}\n\nexport default PlayBtn;\n\nPlayBtn.propTypes = {\n  func: PropTypes.func,\n};\n\nPlayBtn.defaultProps = {\n  func: {},\n};\n","const ENDPOINT = 'https://opentdb.com/api_token.php?command=request';\nconst QUESTION_ENDPOINT = 'https://opentdb.com/api.php?amount=5';\n\nasync function getToken() {\n  try {\n    const response = await fetch(ENDPOINT);\n    const data = await response.json();\n    return data.token;\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getQuestions(receiveToken, category, answear, difficulty) {\n  let URL = '';\n\n  if (category && answear && difficulty) {\n    URL = `&category=${Number(category)}&difficulty=${difficulty}&type=${answear}&token=`;\n  } else if (category) {\n    URL = `&category=${Number(category)}&token=`;\n  } else if (difficulty) {\n    URL = `&difficulty=${difficulty}&token=`;\n  } else if (answear) {\n    URL = `&type=${answear}&token=`;\n  } else {\n    URL = '&token=';\n  }\n\n  try {\n    const response = await fetch(`${QUESTION_ENDPOINT}${URL}${receiveToken}`);\n    const questions = await response.json();\n    return questions.results;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport {\n  getToken,\n  getQuestions,\n};\n","import { Howl } from 'howler';\nimport mainTheme from '../sounds/ShowDoMilhaoTheme.mp3';\nimport Certa from '../sounds/certaResposta.mp3';\nimport Proxima from '../sounds/proximaPergunta.mp3';\nimport Errou from '../sounds/Errou.mp3';\n\nconst sfx = {\n  main: new Howl({\n    src: [mainTheme],\n    volume: 0.08,\n  }),\n  certa: new Howl({\n    src: [Certa],\n  }),\n  proxima: new Howl({\n    src: [Proxima],\n  }),\n  errou: new Howl({\n    src: [Errou],\n  }),\n};\n\nfunction stopMain() {\n  sfx.main.stop();\n}\n\nfunction playMain() {\n  if (!sfx.main.playing()) {\n    sfx.main.play();\n  }\n}\n//\nfunction playProxima() {\n  sfx.proxima.play();\n}\n\nfunction stopProxima() {\n  sfx.certa.stop();\n}\n\nfunction playCerta() {\n  sfx.certa.play();\n}\n\nfunction playErrou() {\n  sfx.errou.play();\n}\n\nfunction stopCertaErrouSound() {\n  sfx.certa.stop();\n  sfx.errou.stop();\n}\n\nexport {\n  playMain,\n  stopMain,\n  playProxima,\n  playCerta,\n  stopProxima,\n  playErrou,\n  stopCertaErrouSound,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport logo from '../trivia.png';\nimport BtnSetupScreen from '../components/btnSetupScreen';\nimport fetchGravatar from '../services/GravatarApi';\nimport { sendGravatarSrcImg, sendQuestions, resetStoreScores, modifyPlayingTruOrFalse,\n} from '../redux/actions/index';\nimport InputName from '../components/InputName';\nimport InputEmail from '../components/InputEmail';\nimport PlayBtn from '../components/PlayBtn';\nimport about from '../images/about.png';\nimport { getToken } from '../services/TriviaApi';\nimport { playMain, stopMain } from '../components/SoundControl';\nimport '../App.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputEmail: '',\n      showImg: false,\n      token: '',\n      redirect: false,\n      redirectToAbout: false,\n    };\n    this.handleOnChangeInputValidate = this.handleOnChangeInputValidate.bind(this);\n    this.playHandle = this.playHandle.bind(this);\n    this.showProfileImg = this.showProfileImg.bind(this);\n    this.localStorageSave = this.localStorageSave.bind(this);\n    this.receiveToken = this.receiveToken.bind(this);\n    this.resetStoreInfos = this.resetStoreInfos.bind(this);\n    this.aboutBtn = this.aboutBtn.bind(this);\n    this.aboutBtnClickHandler = this.aboutBtnClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const { soundTrue } = this.props;\n    if (soundTrue) playMain();\n    this.receiveToken();\n    this.resetStoreInfos();\n    const button = document.querySelector('#play-btn');\n    button.disabled = true;\n  }\n\n  async receiveToken() {\n    const response = await getToken();\n    this.setState({\n      token: response,\n    });\n  }\n\n  resetStoreInfos() {\n    const { resetStorePoints } = this.props;\n    const ZERO = 0;\n    resetStorePoints(ZERO, ZERO);\n  }\n\n  handleOnChangeInputValidate(e) {\n    const name = document.querySelector('#inputName');\n    const button = document.querySelector('#play-btn');\n    const email = document.querySelector('#inputEmail');\n\n    if (email.checkValidity() && email.value.length >= 1 && name.value.length >= 1) {\n      button.disabled = false;\n    } else if (\n      !email.checkValidity()\n      || name.value.length < 1\n      || email.value.length < 1) {\n      button.disabled = true;\n    }\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  }\n\n  async playHandle() {\n    const { inputEmail, inputName, token } = this.state;\n    const { sendImgSrc, playingfalse } = this.props;\n\n    const hash = md5(inputEmail).toString();\n    await fetchGravatar(hash);\n    this.setState({\n      showImg: true,\n      imgHash: hash,\n    });\n    const src = `https://www.gravatar.com/avatar/${hash}.jpg`;\n    sendImgSrc(inputName, src, inputEmail, token);\n    this.localStorageSave();\n    this.setState({\n      redirect: true,\n    });\n    stopMain();\n    playingfalse(false);\n  }\n\n  localStorageSave() {\n    const { token } = this.state;\n    const { score,\n      assertions,\n      playerName,\n      playerEmail,\n      playerPhoto,\n      getCategoryConfigFromStore, getAnswearConfigFromStore, getDificultyConfigFromStore,\n    } = this.props;\n    const player = {\n      player: {\n        name: playerName,\n        assertions,\n        score,\n        gravatarEmail: playerEmail,\n        photo: playerPhoto,\n        categoryConfig: getCategoryConfigFromStore,\n        answearConfig: getAnswearConfigFromStore,\n        dificultyConfig: getDificultyConfigFromStore,\n      },\n    };\n    localStorage.state = JSON.stringify(player);\n    localStorage.token = JSON.stringify(token);\n  }\n\n  showProfileImg() {\n    const { imgHash } = this.state;\n    return (\n      <img alt=\"profile img\" src={ `https://www.gravatar.com/avatar/${imgHash}.jpg` } />\n    );\n  }\n\n  aboutBtn() {\n    return (\n      <div className=\"div-btn-about\">\n        <button\n          type=\"button\"\n          className=\"btn-neon-red btn-about\"\n          onClick={ this.aboutBtnClickHandler }\n        >\n          About\n        </button>\n        <div className=\"div-btn-img-about\">\n          <img src={ about } alt=\"sobre\" className=\"btn-about-img\" />\n        </div>\n      </div>\n    );\n  }\n\n  aboutBtnClickHandler() {\n    this.setState({\n      redirectToAbout: true,\n    });\n  }\n\n  render() {\n    const { showImg, redirect, redirectToAbout } = this.state;\n\n    if (redirect) return <Redirect to=\"/game\" />;\n    if (redirectToAbout) return <Redirect to=\"/about\" />;\n\n    return (\n      <div>\n        <header className=\"App-header\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <section className=\"login-container\">\n            <form className=\"login-form neon-border-purple\">\n              <InputName func={ this.handleOnChangeInputValidate } />\n              <InputEmail func={ this.handleOnChangeInputValidate } />\n              <PlayBtn func={ this.playHandle } />\n            </form>\n            <BtnSetupScreen />\n            <this.aboutBtn />\n            { showImg ? this.showProfileImg() : '' }\n          </section>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  playerToken: state.player.token,\n  playerName: state.player.name,\n  playerEmail: state.player.gravatarEmail,\n  assertions: state.player.assertions,\n  score: state.player.score,\n  playerPhoto: state.player.srcGravatarImg,\n  getCategoryConfigFromStore: state.gameMechanics.categoryValue,\n  getAnswearConfigFromStore: state.gameMechanics.answearType,\n  getDificultyConfigFromStore: state.gameMechanics.dificulty,\n  soundTrue: state.questions.playSound,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendImgSrc: (inputName, src, inputEmail, token) => (\n    dispatch(sendGravatarSrcImg(inputName, src, inputEmail, token))),\n  sendQuestionList: (questionList) => dispatch(sendQuestions(questionList)),\n  resetStorePoints: (score, assertions) => dispatch(resetStoreScores(score, assertions)),\n  playingfalse: (bool) => dispatch(modifyPlayingTruOrFalse(bool)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  sendImgSrc: PropTypes.func,\n  resetStorePoints: PropTypes.func,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  playerName: PropTypes.string.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n  playerPhoto: PropTypes.string.isRequired,\n  getCategoryConfigFromStore: PropTypes.string.isRequired,\n  getAnswearConfigFromStore: PropTypes.string.isRequired,\n  getDificultyConfigFromStore: PropTypes.string.isRequired,\n  soundTrue: PropTypes.bool.isRequired,\n  playingfalse: PropTypes.func,\n};\n// -\nLogin.defaultProps = {\n  sendImgSrc: {},\n  resetStorePoints: PropTypes.func,\n  playingfalse: PropTypes.func,\n};\n","const CategoryOptions = [\n  {\n    category: 'Random',\n    value: '',\n  },\n  {\n    category: 'General knowledge',\n    value: 9,\n  },\n  {\n    category: 'Entertainment: Books',\n    value: 10,\n  },\n  {\n    category: 'Entertainment: Movies',\n    value: 11,\n  },\n  {\n    category: 'Entertainment: Music',\n    value: 12,\n  },\n  {\n    category: 'Entertainment: Musical & Theater',\n    value: 13,\n  },\n  {\n    category: 'Entertainment: Television',\n    value: 14,\n  },\n  {\n    category: 'Entertainment: Video Game',\n    value: 15,\n  },\n  {\n    category: 'Entertainment: Board Games',\n    value: 16,\n  },\n  {\n    category: 'Entertainment: Japanese Anime & Manga',\n    value: 31,\n  },\n  {\n    category: 'Entertainment: Cartoon & Animation',\n    value: 32,\n  },\n  {\n    category: 'Entertainment: Comics',\n    value: 29,\n  },\n  {\n    category: 'Science and Nature',\n    value: 17,\n  },\n  {\n    category: 'Science: Computers',\n    value: 18,\n  },\n  {\n    category: 'Science: Mathematics',\n    value: 19,\n  },\n  {\n    category: 'Science: Gadgets/Technology',\n    value: 30,\n  },\n  {\n    category: 'Mythology',\n    value: 20,\n  },\n  {\n    category: 'Sports',\n    value: 21,\n  },\n  {\n    category: 'Geography',\n    value: 22,\n  },\n  {\n    category: 'History',\n    value: 23,\n  },\n  {\n    category: 'Policy',\n    value: 24,\n  },\n  {\n    category: 'Art',\n    value: 25,\n  },\n  {\n    category: 'Celebrities',\n    value: 26,\n  },\n  {\n    category: 'Animal Kingdom',\n    value: 27,\n  },\n  {\n    category: 'Vehicles',\n    value: 28,\n  },\n];\n\nexport default CategoryOptions;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GiSoundOn, GiSoundOff } from 'react-icons/gi';\nimport setup from '../images/gear.png';\nimport back from '../images/back_4.png';\nimport '../App.css';\nimport CategoryOptions from '../components/CategoryOptions';\nimport { sendConfigOptionsAction, modifyPlaySound } from '../redux/actions';\nimport { stopMain, playMain } from '../components/SoundControl';\n// import '../css/btnSetupScreen.css';\n\nclass Setup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categoryConfig: '',\n      answearConfig: '',\n      dificultyConfig: '',\n      appliedConfig: false,\n    };\n    this.dificultyRender = this.dificultyRender.bind(this);\n    this.confirmBtnRender = this.confirmBtnRender.bind(this);\n    this.confirmBtnClickHandler = this.confirmBtnClickHandler.bind(this);\n    this.answearTypeRender = this.answearTypeRender.bind(this);\n    this.categoryTypeRender = this.categoryTypeRender.bind(this);\n    this.selectChangeHandler = this.selectChangeHandler.bind(this);\n    this.SoundClickHandler = this.SoundClickHandler.bind(this);\n    this.soundBtnRender = this.soundBtnRender.bind(this);\n  }\n\n  SoundClickHandler() {\n    const { allowSound, soundTrue } = this.props;\n    if (soundTrue) {\n      stopMain();\n      return allowSound(false);\n    }\n    allowSound(true);\n    playMain();\n  }\n\n  soundBtnRender() {\n    const { soundTrue } = this.props;\n    return (\n      soundTrue ? (\n        <GiSoundOn\n          className=\"sound-btn\"\n          size=\"3em\"\n          onClick={ this.SoundClickHandler }\n        />)\n        : (\n          <GiSoundOff\n            className=\"sound-btn\"\n            size=\"3em\"\n            onClick={ this.SoundClickHandler }\n          />)\n    );\n  }\n\n  categoryTypeRender() {\n    return (\n      CategoryOptions\n        .map((item, index) => (\n          <option key={ index } value={ item.value }>{item.category}</option>\n        ))\n    );\n  }\n\n  answearTypeRender() {\n    const { answearConfig } = this.state;\n    return (\n      <select\n        id=\"answearConfig\"\n        value={ answearConfig }\n        onChange={ this.selectChangeHandler }\n        className=\"setup-btn-neon-red\"\n      >\n        <option value=\"\">Random</option>\n        <option value=\"multiple\">Multiple Choice</option>\n        <option value=\"boolean\">Truth or False</option>\n      </select>\n    );\n  }\n\n  dificultyRender() {\n    const { dificultyConfig } = this.state;\n    return (\n      <select\n        id=\"dificultyConfig\"\n        value={ dificultyConfig }\n        onChange={ this.selectChangeHandler }\n        className=\"setup-btn-neon-red\"\n      >\n        <option value=\"\">Random</option>\n        <option value=\"easy\">Easy</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"hard\">Hard</option>\n      </select>\n    );\n  }\n\n  confirmBtnClickHandler() {\n    const {\n      categoryConfig: category,\n      answearConfig: answear,\n      dificultyConfig: dificulty } = this.state;\n    const { sendConfigToStore } = this.props;\n    sendConfigToStore(category, answear, dificulty);\n    this.setState({\n      appliedConfig: true,\n    });\n  }\n\n  selectChangeHandler(e) {\n    this.setState({\n      [e.target.id]: e.target.value,\n      appliedConfig: false,\n    });\n  }\n\n  confirmBtnRender() {\n    const { appliedConfig } = this.state;\n    return (\n\n      <div className=\"setup-back-home2\">\n        <button\n          type=\"button\"\n          className=\"btn-neon-green back-home\"\n          onClick={ this.confirmBtnClickHandler }\n        >\n          Apply Settings\n        </button>\n        { appliedConfig\n          ? (\n            <h2\n              style={ { color: 'green' } }\n            >\n              Settings Applied!\n            </h2>\n          )\n          : ''}\n      </div>\n    );\n  }\n\n  render() {\n    const { categoryConfig } = this.state;\n    return (\n      <>\n        <div className=\"header-setup\">\n          <img src={ setup } alt=\"Ranking\" className=\"setup-img-gear\" />\n          <h2 data-testid=\"settings-title\" className=\"title-setup\">Settings</h2>\n        </div>\n        <div className=\"option-container\">\n          <div className=\"options-setup-container\">\n            <label htmlFor=\"dificultyConfig\">\n              Difficulty:\n              {this.dificultyRender()}\n            </label>\n            <label htmlFor=\"answearConfig\">\n              Answer Type:\n              {this.answearTypeRender()}\n            </label>\n            <label htmlFor=\"categoryConfig\">\n              Category:\n              <select\n                id=\"categoryConfig\"\n                value={ categoryConfig }\n                onChange={ this.selectChangeHandler }\n                className=\"setup-btn-neon-red\"\n              >\n                {this.categoryTypeRender()}\n              </select>\n            </label>\n            { this.soundBtnRender() }\n          </div>\n        </div>\n        <br />\n        {this.confirmBtnRender()}\n        <br />\n        <Link to=\"/\" style={ { textDecoration: 'none' } }>\n          <div className=\"setup-back-home\">\n            <img src={ back } alt=\"Voltar\" className=\"back-img-home\" />\n            <button\n              type=\"button\"\n              data-testid=\"btn-go-home\"\n              className=\"btn-neon-blue back-home\"\n            >\n              Back to Login\n            </button>\n          </div>\n        </Link>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  soundTrue: state.questions.playSound,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendConfigToStore: (category, answear, dificulty) => (\n    dispatch(sendConfigOptionsAction(category, answear, dificulty))),\n  allowSound: (bool) => dispatch(modifyPlaySound(bool)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Setup);\n\nSetup.propTypes = {\n  sendConfigToStore: PropTypes.func,\n  allowSound: PropTypes.func,\n  soundTrue: PropTypes.bool.isRequired,\n};\n\nSetup.defaultProps = {\n  sendConfigToStore: PropTypes.func,\n  allowSound: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  decreaseTimeToRespond, InitiateTimer, stopAndResetFunction,\n} from '../redux/actions';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.tick = this.tick.bind(this);\n    this.stop = this.stop.bind(this);\n    this.ResetTimer = this.ResetTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const { SendStopAndResetFunc } = this.props;\n    SendStopAndResetFunc(this.stop, this.ResetTimer);\n    const MIL = 1000;\n    this.clock = setInterval(() => this.tick(), MIL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.clock);\n  }\n\n  ResetTimer() {\n    const MIL = 1000;\n    this.clock = setInterval(() => this.tick(), MIL);\n  }\n\n  stop() {\n    clearInterval(this.clock);\n  }\n\n  tick() {\n    const { sendCurrentTime, globalTime } = this.props;\n    sendCurrentTime(globalTime - 1);\n  }\n\n  render() {\n    const { globalTime } = this.props;\n    const ZERO = 0;\n    const DEZ = 10;\n    const TRINTA = 30;\n\n    if (globalTime <= ZERO) this.stop();\n    if (globalTime && globalTime < TRINTA) {\n      (document.querySelector('.timer-span-text').style.color = 'rgb(255, 250, 187)');\n    }\n    if (globalTime && globalTime <= DEZ) {\n      const text = document.querySelector('.timer-span-text');\n      text.style.color = 'rgb(255, 187, 187)';\n    }\n    return (\n      <div>\n        <h5 className=\"timer-text\">\n          Response time:\n          <span className=\"timer-value neonText timer-span-text\">{` ${globalTime}`}</span>\n        </h5>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendCurrentTime: (time) => dispatch(decreaseTimeToRespond(time)),\n  startGlobalTimer: (startTimer) => dispatch(InitiateTimer(startTimer)),\n  SendStopAndResetFunc: (func, func2) => dispatch(stopAndResetFunction(func, func2)),\n});\n\nconst mapStateToProps = (state) => ({\n  globalTime: state.gameMechanics.timeToRespond,\n  running: state.gameMechanics.timerRunning,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n\nTimer.propTypes = {\n  sendCurrentTime: PropTypes.func,\n\n  SendStopAndResetFunc: PropTypes.func,\n  globalTime: PropTypes.number,\n\n};\n\nTimer.defaultProps = {\n  SendStopAndResetFunc: {},\n  sendCurrentTime: {},\n  globalTime: 30,\n};\n","const INCORRECT = '#incorrect-answear';\nconst CORRECT = '#correct-answear';\n\nfunction changeBorderColor() {\n  const wrong = document.querySelectorAll(INCORRECT);\n  const correct = document.querySelector(CORRECT);\n  wrong.forEach((element) => {\n    element.style.border = '3px solid rgb(255, 0, 0)';\n  });\n  correct.style.border = '3px solid rgb(6, 240, 15)';\n}\n\nfunction disableBtnsAfterTimer() {\n  const wrong = document.querySelectorAll(INCORRECT);\n  const correct = document.querySelector(CORRECT);\n  wrong.forEach((element) => {\n    element.disabled = true;\n  });\n  correct.disabled = true;\n}\n\nfunction allowAbleBtnsAfterNextClick() {\n  const wrong = document.querySelectorAll(INCORRECT);\n  const correct = document.querySelector(CORRECT);\n  wrong.forEach((element) => {\n    element.disabled = false;\n  });\n  correct.disabled = false;\n}\n\nfunction randomizeCorrectQuestion() {\n  const numberOfQuestions = document.querySelectorAll('.inputNeon-purple');\n  if (numberOfQuestions.length === 2) {\n    const questArray = ['a', 'b'];\n    const two = 2;\n    const randomNumberZeroToTwo = Math.floor(Math.random() * (two));\n    const question = document.querySelector('.correct-question');\n    question.style.gridArea = questArray[randomNumberZeroToTwo];\n    console.log('randomizei perguntas verdadeiro ou falso');\n    return;\n  }\n  const questArray = ['a', 'b', 'c', 'd'];\n  const four = 4;\n  const randomNumberZeroToThree = Math.floor(Math.random() * (four));\n  const question = document.querySelector('.correct-question');\n  question.style.gridArea = questArray[randomNumberZeroToThree];\n  console.log('randomizei perguntas multipla escolha');\n}\n\nexport {\n  changeBorderColor,\n  disableBtnsAfterTimer,\n  allowAbleBtnsAfterNextClick,\n  randomizeCorrectQuestion,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass QuestionPainel extends Component {\n  render() {\n    const { triviaQuestions, idTrivia, questionNumber } = this.props;\n    const { difficulty } = triviaQuestions[idTrivia];\n    return (\n      <div className=\"question-panel\">\n        <span>\n          {`Questão: ${Number(questionNumber)}/5 | `}\n        </span>\n        <span>\n          {`Dificulty: \n          ${difficulty}`}\n        </span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  triviaQuestions: state.questions.questions,\n  idTrivia: state.questions.idTrivia,\n  questionNumber: state.player.questionsPlayed,\n});\n\nexport default connect(mapStateToProps)(QuestionPainel);\n\nQuestionPainel.propTypes = ({\n  triviaQuestions: PropTypes.arrayOf(Object),\n  idTrivia: PropTypes.number,\n  questionNumber: PropTypes.number,\n});\n\nQuestionPainel.defaultProps = {\n  idTrivia: 0,\n  triviaQuestions: [],\n  questionNumber: 1,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Timer from './Timer';\nimport { increasePlayerScore, modifyNextBtn,\n  allowQuestionsBtnAfterNextClick, modifyTimer, addQuestionsPlayed,\n} from '../redux/actions';\nimport quot1 from '../images/quots_2.png';\nimport quot2 from '../images/quots_1.png';\nimport {\n  changeBorderColor,\n  disableBtnsAfterTimer,\n  allowAbleBtnsAfterNextClick,\n  randomizeCorrectQuestion } from '../helpers/FunctionsHelpers';\nimport { playProxima, playCerta, playErrou } from './SoundControl';\nimport QuestionPainel from './QuestionPainel';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n    this.generateQuestionsBtnFunc = this.generateQuestionsBtnFunc.bind(this);\n    this.manageCorrectAnswear = this.manageCorrectAnswear.bind(this);\n    this.localStorageNewSave = this.localStorageNewSave.bind(this);\n  }\n\n  componentDidMount() {\n    randomizeCorrectQuestion();\n    const { sendAbleQuestBtnFunc, soundTrue } = this.props;\n    if (soundTrue) playProxima();\n    sendAbleQuestBtnFunc(allowAbleBtnsAfterNextClick);\n  }\n\n  manageCorrectAnswear() {\n    const { addPoint, globalTimer, assertions, showNextBtn,\n      stopTimer, soundTrue } = this.props;\n    stopTimer();\n    const DEZ = 10;\n    const point = DEZ + (globalTimer * this.multiplier);\n    this.localStorageNewSave(point, assertions);\n    addPoint(point, (assertions + 1));\n    showNextBtn(true);\n    disableBtnsAfterTimer();\n    if (soundTrue) playCerta();\n  }\n\n  validateScore(e) {\n    const {\n      triviaQuestions, idTrivia: id,\n      showNextBtn, stopTimer, soundTrue,\n    } = this.props;\n    const { difficulty } = triviaQuestions[id];\n    this.multiplier = 0;\n\n    switch (difficulty) {\n    case 'easy':\n      this.multiplier = 1;\n      break;\n\n    case 'medium':\n      this.multiplier = 2;\n      break;\n\n    case 'hard':\n      this.multiplier = 3;\n      break;\n\n    default:\n      break;\n    }\n    if (e.target.id === 'correct-answear') {\n      this.manageCorrectAnswear();\n    } else if (e.target.id === 'incorrect-answear') {\n      if (soundTrue) playErrou();\n      disableBtnsAfterTimer();\n      stopTimer();\n      showNextBtn(true);\n    }\n  }\n\n  localStorageNewSave(point, assertions) {\n    const {\n      playerName,\n      playerEmail,\n      getCategoryConfigFromStore,\n      getAnswearConfigFromStore, getDificultyConfigFromStore } = this.props;\n    const previousScore = JSON.parse(localStorage.state).player.score;\n    const picture = JSON.parse(localStorage.state).player.photo;\n    const player = {\n      player: {\n        name: playerName,\n        assertions: assertions + 1,\n        score: previousScore + point,\n        gravatarEmail: playerEmail,\n        photo: picture,\n        categoryConfig: getCategoryConfigFromStore,\n        answearConfig: getAnswearConfigFromStore,\n        dificultyConfig: getDificultyConfigFromStore,\n      },\n    };\n    localStorage.state = JSON.stringify(player);\n  }\n\n  generateQuestionsBtnFunc() {\n    const { incorrectQuest, correctAnswears,\n      idTrivia: id } = this.props;\n    return (\n      <div className=\"option-container\">\n        { incorrectQuest[id].map((item, index) => (\n          <button\n            id=\"incorrect-answear\"\n            type=\"button\"\n            key={ `wrong-answer-${index}` }\n            className=\"inputNeon-purple\"\n            data-testid={ `wrong-answer-${index}` }\n            onClick={ (e) => { changeBorderColor(); this.validateScore(e); } }\n          >\n            { item }\n          </button>\n        )) }\n        <button\n          type=\"button\"\n          id=\"correct-answear\"\n          className=\"inputNeon-purple correct-question\"\n          data-testid=\"correct-answer\"\n          onClick={ (e) => { changeBorderColor(); this.validateScore(e); } }\n        >\n          { correctAnswears[id] }\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      triviaQuestions, idTrivia: id, func, globalTimer, shouldShowNextBtn,\n      showNextBtn,\n    } = this.props;\n    const { category, question } = triviaQuestions[id];\n    if (globalTimer <= 0) {\n      disableBtnsAfterTimer();\n      changeBorderColor();\n      showNextBtn(true);\n    }\n\n    return (\n      <>\n        <Timer />\n        <div className=\"question-container\">\n          <div className=\"neon-border-question\">\n            <img alt=\"\" src={ quot1 } className=\"quot-1\" />\n            <div className=\"question-div\">\n              <QuestionPainel />\n              <h4 data-testid=\"question-category\" className=\"questions-cat\">\n                Category:\n                { category }\n              </h4>\n              <h3 data-testid=\"question-text\" className=\"questions-text\">{ question }</h3>\n            </div>\n            <img alt=\"\" src={ quot2 } className=\"quot-2\" />\n          </div>\n          <div>\n            { this.generateQuestionsBtnFunc() }\n            {\n              shouldShowNextBtn ? (\n                <button\n                  type=\"button\"\n                  onClick={ func }\n                  className=\"btn-neon-red btn-next\"\n                  data-testid=\"btn-next\"\n                >\n                  Next\n                </button>) : ''\n            }\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  triviaQuestions: state.questions.questions,\n  incorrectQuest: state.questions.incorrectAnswears,\n  correctAnswears: state.questions.correctAnswears,\n  idTrivia: state.questions.idTrivia,\n  runningTimer: state.gameMechanics.timerRunning,\n  globalTimer: state.gameMechanics.timeToRespond,\n  stopTimer: state.gameMechanics.stopTimerFunc,\n  shouldShowNextBtn: state.gameMechanics.showNextBtn,\n  score: state.player.score,\n  assertions: state.player.assertions,\n  playerName: state.player.name,\n  playerEmail: state.player.gravatarEmail,\n  getCategoryConfigFromStore: state.gameMechanics.categoryValue,\n  getAnswearConfigFromStore: state.gameMechanics.answearType,\n  getDificultyConfigFromStore: state.gameMechanics.dificulty,\n  soundTrue: state.questions.playSound,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPoint: (point, assertions) => dispatch(increasePlayerScore(point, assertions)),\n  showNextBtn: (boolean) => dispatch(modifyNextBtn(boolean)),\n  sendAbleQuestBtnFunc: (func) => dispatch(allowQuestionsBtnAfterNextClick(func)),\n  modifyTimerRunning: (bool) => dispatch(modifyTimer(bool)),\n  increasePlayedQuestions: () => dispatch(addQuestionsPlayed()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\nQuestions.propTypes = ({\n  triviaQuestions: PropTypes.arrayOf(Object),\n  idTrivia: PropTypes.number,\n  func: PropTypes.func,\n  globalTimer: PropTypes.number.isRequired,\n  addPoint: PropTypes.func,\n  showNextBtn: PropTypes.func,\n  shouldShowNextBtn: PropTypes.bool.isRequired,\n  sendAbleQuestBtnFunc: PropTypes.func,\n  assertions: PropTypes.number.isRequired,\n  stopTimer: PropTypes.func,\n  incorrectQuest: PropTypes.arrayOf(Array),\n  correctAnswears: PropTypes.arrayOf(Array),\n  playerName: PropTypes.string.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n  getCategoryConfigFromStore: PropTypes.string.isRequired,\n  getAnswearConfigFromStore: PropTypes.string.isRequired,\n  getDificultyConfigFromStore: PropTypes.string.isRequired,\n  soundTrue: PropTypes.bool.isRequired,\n});\n\nQuestions.defaultProps = {\n  idTrivia: 0,\n  triviaQuestions: [],\n  func: {},\n  addPoint: PropTypes.func,\n  showNextBtn: PropTypes.func,\n  sendAbleQuestBtnFunc: PropTypes.func,\n  stopTimer: PropTypes.func,\n  incorrectQuest: PropTypes.arrayOf(Array),\n  correctAnswears: PropTypes.arrayOf(Array),\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport border from '../images/header_base.png';\n\nclass Header extends Component {\n  render() {\n    const { profileImg, profileName, profileScore } = this.props;\n    return (\n      <div>\n        <header className=\"header-body\">\n          <img\n            src={ profileImg }\n            data-testid=\"header-profile-picture\"\n            alt=\"User profile\"\n          />\n          <span\n            data-testid=\"header-player-name\"\n            className=\"header-player-name\"\n          >\n            { profileName }\n          </span>\n          <div className=\"score-div-container\">\n            <span className=\"text-score\">\n              SCORE\n            </span>\n            <span\n              className=\"ingame-score-number\"\n              data-testid=\"header-score\"\n            >\n              { profileScore }\n            </span>\n          </div>\n\n        </header>\n        <div className=\"border-header\">\n          <img src={ border } alt=\"\" className=\"img-border\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  profileImg: state.player.srcGravatarImg,\n  profileName: state.player.name,\n  profileScore: state.player.score,\n});\n\n// const mapDispatchToProps = {\n//   return;\n// };\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  profileImg: PropTypes.string.isRequired,\n  profileName: PropTypes.string.isRequired,\n  profileScore: PropTypes.number.isRequired,\n};\n","function FormatCorrectQuestion(questionList) {\n  const correct = questionList.map((item) => {\n    item = item.replace(/&quot;/gi, '\"');\n    item = item.replace(/&#039;/gi, '');\n    item = item.replace(/&eacute;/gi, 'é');\n    item = item.replace(/&amp;/gi, '');\n    item = item.replace(/&lt;/gi, '');\n    item = item.replace(/&;/gi, '');\n    item = item.replace(/&/gi, '');\n    item = item.replace(/;/gi, '');\n    return item;\n  });\n  return correct;\n}\n\nfunction FormatIncorrectQuestions(questionList) {\n  const mapao = questionList.map((item) => {\n    const mapinha = item.map((quest) => {\n      quest = quest.replace(/&quot;/gi, '\"');\n      quest = quest.replace(/&#039;/gi, '');\n      quest = quest.replace(/&eacute;/gi, 'é');\n      quest = quest.replace(/&amp;/gi, '');\n      quest = quest.replace(/&lt;/gi, '');\n      quest = quest.replace(/&;/gi, '');\n      quest = quest.replace(/&/gi, '');\n      quest = quest.replace(/;/gi, '');\n      return quest;\n    });\n    return mapinha;\n  });\n  return mapao;\n}\n\nfunction FormatQuestions(questionList) {\n  const questions = questionList.map((item) => {\n    item.question = item.question.replace(/&quot;/gi, '\"');\n    item.question = item.question.replace(/&#039;/gi, '');\n    item.question = item.question.replace(/&eacute;/gi, 'é');\n    item.question = item.question.replace(/&amp;/gi, '');\n    item.question = item.question.replace(/&lt;/gi, '');\n    item.question = item.question.replace(/&;/gi, '');\n    item.question = item.question.replace(/&/gi, '');\n    item.question = item.question.replace(/;/gi, '');\n    return item;\n  });\n  return questions;\n}\n\nexport {\n  FormatQuestions,\n  FormatIncorrectQuestions,\n  FormatCorrectQuestion,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass BackToLoginGame extends Component {\n  render() {\n    return (\n      <div className=\"loadind-div\">\n        <p className=\"about-description\">\n          If you've been viewing this screen for more than 5 seconds,\n          we didn't find any questions with the settings you chose!\n          <br />\n          If you've been viewing this screen for more than 5 seconds, we haven't found any questions with the settings you've chosen!\n        </p>\n        <Link to=\"/\" style={ { textDecoration: 'none' } }>\n          <div className=\"setup-back-home\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-go-home\"\n              className=\"btn-neon-blue back-home\"\n            >\n              Back to login\n            </button>\n          </div>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default BackToLoginGame;\n","import React, { Component } from 'react';\nimport BackToLoginGame from './BackToLoginGame';\n\nclass Loading extends Component {\n  render() {\n    return (\n\n      <div className=\"loading-page\">\n        <div className=\"loading-animation\">\n          <div className=\"loading\">\n            Loading Questions...\n          </div>\n          <div className=\"loading-circle\" />\n          <br />\n        </div>\n\n        <BackToLoginGame />\n\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport Questions from '../components/Questions';\nimport { questionIdIncrease, modifyTimer, InitiateTimer, modifyNextBtn,\n  addQuestionsPlayed, resetTriviaQuestionsIdAndPlayedQuestions,\n  sendQuestions, recoverNameAndEmailFromRefresh,\n  sendConfigOptionsAction, modifyPlayingTruOrFalse,\n} from '../redux/actions';\nimport { getQuestions } from '../services/TriviaApi';\nimport '../App.css';\nimport Header from '../components/Header';\nimport { FormatQuestions, FormatCorrectQuestion,\n  FormatIncorrectQuestions } from '../helpers/FormatQuestions';\nimport Loading from '../components/Loading';\nimport { playProxima, stopCertaErrouSound } from '../components/SoundControl';\nimport { randomizeCorrectQuestion } from '../helpers/FunctionsHelpers';\n\nconst TRINTA = 30;\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirectToFeedBack: false,\n      componentMounted: false,\n    };\n    this.handleClickNextBtn = this.handleClickNextBtn.bind(this);\n    this.resetQuestionsBorderColor = this.resetQuestionsBorderColor.bind(this);\n    this.getQuestionList = this.getQuestionList.bind(this);\n    this.checkApiResponseValidity = this.checkApiResponseValidity.bind(this);\n  }\n\n  componentDidMount() {\n    const { sendRecoveredPlayerInfo,\n      sendRecoveredGameConfigToStore } = this.props;\n    const {\n      name,\n      gravatarEmail,\n      photo: img,\n      categoryConfig: category,\n      answearConfig: answear,\n      dificultyConfig: dificulty,\n    } = JSON.parse(localStorage.state).player;\n    const photo = img;\n    sendRecoveredGameConfigToStore(category, answear, dificulty);\n    sendRecoveredPlayerInfo(name, gravatarEmail, photo);\n    const player = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail,\n        photo: img,\n        categoryConfig: category,\n        answearConfig: answear,\n        dificultyConfig: dificulty,\n      },\n    };\n    const time = 700;\n    localStorage.state = JSON.stringify(player);\n    setTimeout(() => {\n      this.getQuestionList();\n    }, time);\n  }\n\n  async getQuestionList() {\n    const {\n      token,\n      sendQuestionList,\n      getCategoryConfigFromStore: category,\n      getAnswearConfigFromStore: answear,\n      getDifficultyConfigFromStore: difficulty,\n    } = this.props;\n    const receiveQuestions = await getQuestions(token, category, answear, difficulty);\n\n    const questionList = [];\n    receiveQuestions.forEach((item) => {\n      questionList.push(item);\n    });\n\n    const incorrectList = [];\n    receiveQuestions.forEach((item) => {\n      incorrectList.push(item.incorrect_answers);\n    });\n\n    const correctList = [];\n    receiveQuestions.forEach((item) => {\n      correctList.push(item.correct_answer);\n    });\n\n    const questions = FormatQuestions(questionList);\n    const incorrectQuestions = FormatIncorrectQuestions(incorrectList);\n    const correctQuestions = FormatCorrectQuestion(correctList);\n\n    sendQuestionList(questions, incorrectQuestions, correctQuestions);\n    this.setState({\n      componentMounted: true,\n    });\n  }\n\n  checkApiResponseValidity() {\n    const { questionListLength } = this.props;\n    const timeOut = 1000;\n    setTimeout(() => {\n      if (questionListLength.length > 0) {\n        const { playingTrue } = this.props;\n        playingTrue(true);\n      }\n    }, timeOut);\n  }\n\n  handleClickNextBtn() {\n    const {\n      increaseId, idTrivia, AddTimeToTimer, resetTimer,\n      showNextBtn, allowQuestionsBtn,\n      totalQuestions, resetQuestionsId, increasePlayedQuestions,\n      soundTrue,\n    } = this.props;\n    randomizeCorrectQuestion();\n    showNextBtn(false);\n    increaseId(idTrivia + 1);\n    allowQuestionsBtn();\n    increasePlayedQuestions();\n    AddTimeToTimer(TRINTA);\n    resetTimer();\n    this.resetQuestionsBorderColor();\n    const questionNumber = 5;\n    stopCertaErrouSound();\n    if (soundTrue && totalQuestions < questionNumber) playProxima();\n    if (totalQuestions === questionNumber) {\n      resetQuestionsId();\n      return (\n        this.setState({\n          redirectToFeedBack: true,\n        })\n      );\n    }\n  }\n\n  resetQuestionsBorderColor() {\n    const wrong = document.querySelectorAll('#incorrect-answear');\n    const correct = document.querySelector('#correct-answear');\n    wrong.forEach((element) => {\n      element.style.border = '';\n    });\n    correct.style.border = '';\n  }\n\n  render() {\n    const { redirectToFeedBack, componentMounted } = this.state;\n    const { playing } = this.props;\n    if (redirectToFeedBack) return <Redirect to=\"/feedback\" />;\n    return (\n      <>\n        {this.checkApiResponseValidity()}\n        <Header />\n        <div className=\"game-container\">\n          {\n            playing && componentMounted ? <Questions\n              func={ this.handleClickNextBtn }\n            /> : <Loading />\n          }\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  idTrivia: state.questions.idTrivia,\n  resetTimer: state.gameMechanics.resetTimerFunc,\n  stopTimerfunc: state.gameMechanics.stopTimerFunc,\n  allowQuestionsBtn: state.gameMechanics.allowQuestionsBtns,\n  runningTimer: state.gameMechanics.timerRunning,\n  totalQuestions: state.player.questionsPlayed,\n  token: state.player.token,\n  getCategoryConfigFromStore: state.gameMechanics.categoryValue,\n  getAnswearConfigFromStore: state.gameMechanics.answearType,\n  getDifficultyConfigFromStore: state.gameMechanics.dificulty,\n  playing: state.questions.playing,\n  questionListLength: state.questions.questions,\n  soundTrue: state.questions.playSound,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  increaseId: (increase) => dispatch(questionIdIncrease(increase)),\n  timerBoolean: (boolean) => dispatch(modifyTimer(boolean)),\n  AddTimeToTimer: (startTimer) => dispatch(InitiateTimer(startTimer)),\n  showNextBtn: (boolean) => dispatch(modifyNextBtn(boolean)),\n  increasePlayedQuestions: () => dispatch(addQuestionsPlayed()),\n  resetQuestionsId: () => (dispatch(resetTriviaQuestionsIdAndPlayedQuestions())),\n  sendQuestionList: (quest, inc, corre) => dispatch(sendQuestions(quest, inc, corre)),\n  sendRecoveredPlayerInfo: (name, email, img) => (\n    dispatch(recoverNameAndEmailFromRefresh(name, email, img))),\n  sendRecoveredGameConfigToStore: (category, answear, dificulty) => (\n    dispatch(sendConfigOptionsAction(category, answear, dificulty))),\n  playingTrue: (bool) => dispatch(modifyPlayingTruOrFalse(bool)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n\nGame.propTypes = {\n  idTrivia: PropTypes.number,\n  increaseId: PropTypes.func.isRequired,\n  AddTimeToTimer: PropTypes.func,\n  resetTimer: PropTypes.func,\n  showNextBtn: PropTypes.func,\n  allowQuestionsBtn: PropTypes.func,\n  totalQuestions: PropTypes.number.isRequired,\n  resetQuestionsId: PropTypes.func,\n  sendQuestionList: PropTypes.func,\n  token: PropTypes.string.isRequired,\n  sendRecoveredPlayerInfo: PropTypes.func,\n  increasePlayedQuestions: PropTypes.func,\n  sendRecoveredGameConfigToStore: PropTypes.func,\n  getCategoryConfigFromStore: PropTypes.string.isRequired,\n  getAnswearConfigFromStore: PropTypes.string.isRequired,\n  getDifficultyConfigFromStore: PropTypes.string.isRequired,\n  playingTrue: PropTypes.func,\n  playing: PropTypes.bool,\n  questionListLength: PropTypes.arrayOf(Array).isRequired,\n  soundTrue: PropTypes.bool.isRequired,\n};\n\nGame.defaultProps = {\n  idTrivia: 0,\n  AddTimeToTimer: PropTypes.func,\n  resetTimer: PropTypes.func,\n  showNextBtn: PropTypes.func,\n  allowQuestionsBtn: PropTypes.func,\n  resetQuestionsId: PropTypes.func,\n  sendQuestionList: PropTypes.func,\n  sendRecoveredPlayerInfo: PropTypes.func,\n  increasePlayedQuestions: PropTypes.func,\n  sendRecoveredGameConfigToStore: PropTypes.func,\n  playingTrue: PropTypes.func,\n  playing: false,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport back from '../images/back_3.png';\nimport trophy from '../images/trophy_1.png';\nimport { modifyPlayingTruOrFalse } from '../redux/actions';\nimport '../App.css';\n\nclass FeedBack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n    this.handleClickRankBtn = this.handleClickRankBtn.bind(this);\n    this.createRankingStorage = this.createRankingStorage.bind(this);\n    this.playAgain = this.playAgain.bind(this);\n    this.PlayAgainClickhandler = this.PlayAgainClickhandler.bind(this);\n  }\n\n  handleClickRankBtn() {\n    this.createRankingStorage();\n    const { playingfalse } = this.props;\n    playingfalse(false);\n  }\n\n  createRankingStorage() {\n    const { name, score, picture } = this.props;\n    const userRanking = {\n      name,\n      score,\n      picture,\n    };\n    if (!localStorage.ranking || localStorage.ranking.length === 0) {\n      localStorage.ranking = JSON.stringify([userRanking]);\n    } else {\n      const localStorageRanking = JSON.parse(localStorage.ranking);\n      localStorageRanking.push(userRanking);\n      localStorage.ranking = JSON.stringify(localStorageRanking);\n    }\n  }\n\n  PlayAgainClickhandler() {\n    const { playingfalse } = this.props;\n    playingfalse(false);\n  }\n\n  // Finalizado\n  playAgain() {\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"btn-play-again\"\n        className=\"play-again btn-neon-red\"\n        onClick={ this.PlayAgainClickhandler }\n      >\n        Play again\n      </button>);\n  }\n\n  render() {\n    const { score, assertion } = this.props;\n    const expectedAssertions = 3;\n    return (\n      <>\n        <Header />\n        <div className=\"feedback-page\">\n\n          <h3 data-testid=\"feedback-text\" className=\"feedback-text\">\n            FeedBack:\n          </h3>\n          <h2 data-testid=\"feedback-text\" className=\"feedback-result neonText\">\n            { assertion < expectedAssertions ? 'Could be better.' : 'Nice job!' }\n          </h2>\n          <h1\n            data-testid=\"feedback-total-score\"\n            className=\"final-score\"\n          >\n            { score }\n          </h1>\n          <h1\n            data-testid=\"feedback-total-question\"\n            className=\"feedback-points\"\n          >\n            { assertion }\n            <span> assertions </span>\n          </h1>\n          <Link to=\"/\" style={ { textDecoration: 'none' } }>\n            <div className=\"div-play-again\">\n              <img src={ back } alt=\"Voltar\" className=\"back-img\" />\n              { this.playAgain() }\n            </div>\n          </Link>\n          <Link to=\"/ranking\" style={ { textDecoration: 'none' } }>\n            <div className=\"div-btn-ranking\">\n              <img src={ trophy } alt=\"Ranking\" className=\"ranking-img\" />\n              <button\n                onClick={ this.handleClickRankBtn }\n                type=\"button\"\n                data-testid=\"btn-ranking\"\n                className=\"btn-neon-blue btn-ranking\"\n              >\n                Show Ranking\n              </button>\n            </div>\n          </Link>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  picture: state.player.srcGravatarImg,\n  name: state.player.name,\n  score: state.player.score,\n  assertion: state.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  playingfalse: (bool) => dispatch(modifyPlayingTruOrFalse(bool)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FeedBack);\n\nFeedBack.propTypes = {\n  picture: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertion: PropTypes.number.isRequired,\n  playingfalse: PropTypes.func,\n};\n\nFeedBack.defaultProps = {\n  playingfalse: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport back from '../images/back_4.png';\nimport trophy from '../images/trophy_1.png';\nimport { modifyPlayingTruOrFalse } from '../redux/actions';\nimport '../App.css';\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirectHome: false,\n    };\n    this.renderRanking = this.renderRanking.bind(this);\n    this.backHomeClickHandler = this.backHomeClickHandler.bind(this);\n  }\n\n  backHomeClickHandler() {\n    const { playingfalse } = this.props;\n    playingfalse(false);\n    this.setState({\n      redirectHome: true,\n    });\n  }\n\n  renderRanking() {\n    const ranking = JSON.parse(localStorage.ranking);\n    const rankingSorted = ranking.sort((a, b) => b.score - a.score);\n    return (\n      rankingSorted.map((user, index) => (\n        <>\n          <div className=\"user-rank-data\" key={ index }>\n            <span className=\"ranking-number\">{ index + 1 }</span>\n            <img src={ user.picture } alt={ user.name } />\n            <p\n              data-testid={ `player-name-${index}` }\n              className=\"ranking-player-name\"\n            >\n              { user.name }\n            </p>\n            <p\n              data-testid={ `player-score-${index}` }\n              className=\"ranking-score\"\n            >\n              { user.score }\n            </p>\n          </div>\n          <hr />\n        </>\n      ))\n    );\n  }\n\n  render() {\n    const { redirectHome } = this.state;\n    if (redirectHome) return <Redirect to=\"/\" />;\n    return (\n      <div className=\"page-ranking\">\n        <div className=\"header-ranking\">\n          <img src={ trophy } alt=\"Ranking\" className=\"ranking-img-trophy\" />\n          <h2 data-testid=\"ranking-title\" className=\"title-ranking\">Ranking</h2>\n        </div>\n        <div className=\"div-users-ranking\">\n          { this.renderRanking() }\n        </div>\n        <div className=\"ranking-back-home\">\n          <img src={ back } alt=\"Voltar\" className=\"back-img-home\" />\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            className=\"btn-neon-blue back-home\"\n            onClick={ this.backHomeClickHandler }\n          >\n            Back to Start\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  playingfalse: (bool) => dispatch(modifyPlayingTruOrFalse(bool)),\n});\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n\nRanking.propTypes = {\n  playingfalse: PropTypes.func,\n};\n\nRanking.defaultProps = {\n  playingfalse: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport back from '../images/back_4.png';\nimport about from '../images/about.png';\nimport arrow1 from '../images/back_1.png';\nimport arrow2 from '../images/back_3.png';\n\nclass About extends Component {\n  constructor(props) {\n    super(props);\n    this.HomeBtnRender = this.HomeBtnRender.bind(this);\n    this.names = this.names.bind(this);\n  }\n\n  HomeBtnRender() {\n    return (\n      <Link to=\"/\" style={ { textDecoration: 'none' } }>\n        <div className=\"about-back-home\">\n          <img src={ back } alt=\"Voltar\" className=\"back-img-home\" />\n          <button\n            type=\"button\"\n            className=\"btn-neon-blue back-home\"\n          >\n            Back to Login\n          </button>\n        </div>\n      </Link>\n    );\n  }\n\n  names() {\n    return (\n      <div className=\"group-names\">\n        <img src={ arrow1 } className=\"arrow\" alt=\"\" />\n        <h4 className=\"about-name\">\n          Camilo Lelis\n        </h4>\n        <h4 className=\"about-name\">\n          Diogo Augusto\n        </h4>\n        <h4 className=\"about-name\">\n          Johnata Pontes\n        </h4>\n        <h4 className=\"about-name\">\n          Marcos Mantovani\n        </h4>\n\n        <img src={ arrow2 } className=\"arrow\" alt=\"\" />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"about\">\n        <div className=\"header-about\">\n          <img src={ about } alt=\"\" className=\"about-img\" />\n          <h2 className=\"title-about\">Grupo 28</h2>\n          <span className=\"name-group\">[UNNAMED]</span>\n        </div>\n        <h3>Olá, somos um grupo de estudantes da escola Trybe! #BeTrybe</h3>\n        <h3>Nosso time se compõem pelos seguintes integrantes:</h3>\n        { this.names() }\n        <p className=\"about-description\">\n          Neste projeto testamos nossos conhecimentos referente a\n          Redux e tudo oque vimos em FrontEnd!\n        </p>\n        <p className=\"about-description\">\n          Realmente foi um desafio fazer uma aplicação como essa a prova de bugs\n          e tentar ao máximo deixar o código limpo, legível e ainda conseguir\n          ficar de bem com o Evaluator.\n        </p>\n        <p className=\"about-description\">\n          Estamos muito Orgulhosos com o resultado!\n        </p>\n        <p className=\"about-description\">\n          Esperamos que você possa se divertir com nossa aplicação/Game,\n          Tenha um bom jogo!\n        </p>\n\n        <p className=\"about-description\">\n          o Texto acima é um exemplo do que podemos colocar aqui nesta página!\n          <br />\n          dem suas opniões para definirmos em conjunto oque colocar aqui Sobre\n          o nosso Grupo!\n        </p>\n        { this.HomeBtnRender() }\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import {\n  SEND_QUESTIONS,\n  QUESTION_ID_INCREASE,\n  RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS,\n  MODIFY_PLAYING_TRUE_FALSE,\n  MODIFY_PLAY_SOUND,\n\n} from '../actions';\n\nconst INITIAL_STATE = {\n  idTrivia: 0,\n  questions: [],\n  incorrectAnswears: [],\n  correctAnswears: [],\n  playing: false,\n  playSound: false,\n};\n\nfunction trivia(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SEND_QUESTIONS:\n    return ({\n      ...state,\n      questions: [...action.questions],\n      incorrectAnswears: action.incorrect,\n      correctAnswears: action.correct,\n    });\n  case QUESTION_ID_INCREASE:\n    return ({\n      ...state,\n      idTrivia: action.increase,\n    });\n  case RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS:\n    return ({\n      ...state,\n      idTrivia: 0,\n    });\n  case MODIFY_PLAYING_TRUE_FALSE:\n    return ({\n      ...state,\n      playing: action.bool,\n    });\n  case MODIFY_PLAY_SOUND:\n    return ({\n      ...state,\n      playSound: action.bool,\n    });\n\n  default:\n    return state;\n  }\n}\n\nexport default trivia;\n","import {\n  SEND_GRAVATAR_SRC_IMG,\n  INCREASE_PLAYER_SCORE,\n  ADD_QUESTIONS_PLAYED,\n  RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS,\n  RESET_STORE_SCORES,\n  RECOVER_NAME_AND_EMAIL_FROM_REFRESH,\n\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  srcGravatarImg: '',\n  token: '',\n  questionsPlayed: 1,\n};\n\nfunction player(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SEND_GRAVATAR_SRC_IMG:\n    return {\n      ...state,\n      srcGravatarImg: action.src,\n      name: action.name,\n      gravatarEmail: action.email,\n      token: action.token,\n    };\n  case INCREASE_PLAYER_SCORE:\n    return {\n      ...state,\n      score: state.score + action.increase,\n      assertions: action.assertions,\n    };\n  case ADD_QUESTIONS_PLAYED:\n    return {\n      ...state,\n      questionsPlayed: state.questionsPlayed + 1,\n    };\n  case RESET_TRIVIA_QUESTIONSID_AND_PLAYED_QUESTIONS:\n    return {\n      ...state,\n      questionsPlayed: 1,\n    };\n  case RESET_STORE_SCORES:\n    return {\n      ...state,\n      score: action.score,\n      assertions: action.assertions,\n    };\n  case RECOVER_NAME_AND_EMAIL_FROM_REFRESH:\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.email,\n      srcGravatarImg: action.img,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default player;\n","import {\n  DECREASE_TIME_TO_RESPOND,\n  INITIATE_TIMER,\n  STOP_N_RESET_TIMER_FUNCTION,\n  MODIFY_TIMER,\n  MODIFY_NEXT_BTN,\n  ALLOW_QUESTIONS_BTN_AFTER_NEXT_CLICK,\n  SEND_CONFIG_OPTIONS,\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  timeToRespond: 30,\n  timerRunning: true,\n  showNextBtn: false,\n  categoryValue: '',\n  answearType: '',\n  dificulty: '',\n};\n\nfunction gameMechanics(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case INITIATE_TIMER:\n    return {\n      ...state,\n      timeToRespond: action.startTimer,\n    };\n\n  case DECREASE_TIME_TO_RESPOND:\n    return {\n      ...state,\n      timeToRespond: action.time,\n    };\n\n  case STOP_N_RESET_TIMER_FUNCTION:\n    return {\n      ...state,\n      stopTimerFunc: action.stop,\n      resetTimerFunc: action.reset,\n    };\n\n  case MODIFY_TIMER:\n    return {\n      ...state,\n      timerRunning: action.boolean,\n    };\n  case MODIFY_NEXT_BTN:\n    return {\n      ...state,\n      showNextBtn: action.boolean,\n    };\n  case ALLOW_QUESTIONS_BTN_AFTER_NEXT_CLICK:\n    return {\n      ...state,\n      allowQuestionsBtns: action.func,\n    };\n  case SEND_CONFIG_OPTIONS:\n    return {\n      ...state,\n      categoryValue: action.category,\n      answearType: action.answear,\n      dificulty: action.dificulty,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default gameMechanics;\n","import { combineReducers } from 'redux';\nimport questions from './questions';\nimport player from './player';\nimport gameMechanics from './gameMechanics';\n\nconst rootReducers = combineReducers({\n  questions,\n  player,\n  gameMechanics,\n});\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter basename=\"/\">\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Setup from './pages/Setup';\nimport Game from './pages/Game';\nimport FeedBack from './pages/FeedBack';\nimport Ranking from './pages/Ranking';\nimport About from './pages/About';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/Setup\"><Setup /></Route>\n        <Route exact path=\"/\" render={ () => <Login /> } />\n        <Route exact path=\"/game\" render={ () => <Game /> } />\n        <Route exact path=\"/feedback\" render={ () => <FeedBack /> } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n        <Route exact path=\"/about\" component={ About } />\n      </Switch>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/back_4.ec5c449f.png\";","module.exports = __webpack_public_path__ + \"static/media/gear.bad035b2.png\";","module.exports = __webpack_public_path__ + \"static/media/about.61586ca6.png\";","module.exports = __webpack_public_path__ + \"static/media/back_3.943b8a14.png\";","module.exports = __webpack_public_path__ + \"static/media/trophy_1.b133f3ea.png\";"],"sourceRoot":""}